<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | cjwebb.github.io]]></title>
  <link href="http://cjwebb.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://cjwebb.github.io/"/>
  <updated>2016-06-28T20:07:06+01:00</updated>
  <id>http://cjwebb.github.io/</id>
  <author>
    <name><![CDATA[Colin Webb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Akka Streams]]></title>
    <link href="http://cjwebb.github.io/blog/2016/06/28/learning-akka-streams/"/>
    <updated>2016-06-28T11:00:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2016/06/28/learning-akka-streams</id>
    <content type="html"><![CDATA[<p>This blog post differs from my usual ones; I&rsquo;m writing it as I learn something. As such, it is more of a story that contains errors and misunderstanding than a factual blog post.</p>

<h2>Hello World</h2>

<p>This blog post follows me trying to learn how to use <a href="http://doc.akka.io/docs/akka/2.4.7/scala/stream/stream-introduction.html">Akka Streams</a>. I haven&rsquo;t needed to use them before, and whenever I glance at the documentation, I usually get confused about just how many new terms are being introduced.</p>

<p>Runnable code is available <a href="https://github.com/cjwebb/blog-code/tree/master/learning-akka-streams">here</a>. I&rsquo;ve included more type annotations that normal, as they will assist us discussing what is going on.</p>

<p>We start by compiling and running the &lsquo;Hello World&rsquo; example in <a href="http://doc.akka.io/docs/akka/2.4.7/scala/stream/stream-quickstart.html#stream-quickstart-scala">the Quick Start Guide</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.NotUsed</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">HelloWorld</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">source</span><span class="o">.</span><span class="n">runForeach</span><span class="o">(</span><span class="n">println</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>Source</code> will be widely used. It represents the inputs to the stream.</p>

<p>A couple of things stand out in the code. Firstly, the <code>ActorMaterializer</code> is new, compared to standard Akka. I have no idea what it does, but I&rsquo;m guessing it could have been named &ldquo;ActorFactory&rdquo;.</p>

<p>Secondly, the <code>Source</code> takes two type parameters. The first is the type that the <code>Source</code> emits. The documentations says that &ldquo;the second one may signal that running the source produces some auxiliary value (e.g. a network source may provide information about the bound port or the peer’s address)&rdquo;. The first one makes sense. The second one doesn&rsquo;t yet. Things will hopefully become clearer once I write something else.</p>

<p>Either way, this stream runs and prints out 1 to 100.</p>

<h2>Using a Sink</h2>

<blockquote><p>Source &ndash;> Sink</p></blockquote>

<p>The first example uses a <code>Source</code>. It is not really a Stream. We just send everything to <code>stdout</code>. Let&rsquo;s use <code>Sink</code>, which are the outputs of a stream.</p>

<p>There seem to be lots of kinds of <code>Sink</code>, including a <code>foreach</code> one, which we can use to <code>println</code> again.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.</span><span class="o">{</span><span class="nc">Done</span><span class="o">,</span> <span class="nc">NotUsed</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">scala.concurrent.Future</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">UsingASink</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Any</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Done</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">source</span><span class="o">.</span><span class="n">runWith</span><span class="o">(</span><span class="n">sink</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Interestingly, the type signature of this is <code>Sink[Any, Future[Done]]</code>. From reading the ScalaDoc, <code>Done</code> is essentially <code>Unit</code>, but they used included it so the code could also run on Java. We&rsquo;ve also used that second mysterious type parameter.</p>

<p>ScalaDoc says &ldquo;The sink is materialized into a [[scala.concurrent.Future]]&rdquo;. Perhaps the ActorMaterializer has been used, and deals with side-effects? Let&rsquo;s keep going, and see if a more complicated example makes it easier to understand.</p>

<h1>Simple Transform</h1>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Source &ndash;> Flow &ndash;> Sink</span></code></pre></td></tr></table></div></figure></p>

<p>So far, we generate a Stream from an <code>Iterable</code>, send it to a <code>Sink</code>, and then print it out. Let&rsquo;s include an intermediate step, where we do some &ldquo;stream processing&rdquo;. For this, we need the <code>Flow</code> class. This is beginning to look more like the Stream I imagined.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.</span><span class="o">{</span><span class="nc">Done</span><span class="o">,</span> <span class="nc">NotUsed</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">scala.concurrent.Future</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimpleTransform</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Any</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Done</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">helloTimesTen</span><span class="k">:</span> <span class="kt">Flow</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Flow</span><span class="o">[</span><span class="kt">Int</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="err">&quot;</span><span class="nc">Hello</span> <span class="n">$</span><span class="o">{</span><span class="n">i</span> <span class="o">*</span> <span class="mi">10</span><span class="o">}&amp;</span><span class="n">ldquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">graph</span><span class="k">:</span> <span class="kt">RunnableGraph</span><span class="o">[</span><span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="n">source</span> <span class="n">via</span> <span class="n">helloTimesTen</span> <span class="n">to</span> <span class="n">sink</span>
</span><span class='line'>  <span class="n">graph</span><span class="o">.</span><span class="n">run</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We discovered another type now; <code>RunnableGraph</code>. This is a &ldquo;Flow with attached input and output, can be executed.&rdquo;</p>

<p>That makes sense. We&rsquo;ve attached a <code>Source</code>, and a <code>Sink</code>, to our <code>Flow</code>. Therefore it has input and output, and should work.</p>

<p>RunnableGraph also specifies that it has a <code>ClosedShape</code>, which also hints at the role that a <code>Materializer</code> takes. I&rsquo;m still yet to figure them out.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">This</span> <span class="o">[[</span><span class="kt">Shape</span><span class="o">]]</span> <span class="n">is</span> <span class="n">used</span> <span class="k">for</span> <span class="n">graphs</span> <span class="n">that</span> <span class="n">have</span> <span class="n">neither</span> <span class="n">open</span> <span class="n">inputs</span> <span class="n">nor</span> <span class="n">open</span>
</span><span class='line'> <span class="o">*</span> <span class="n">outputs</span><span class="o">.</span> <span class="nc">Only</span> <span class="n">such</span> <span class="n">a</span> <span class="o">[[</span><span class="kt">Graph</span><span class="o">]]</span> <span class="n">can</span> <span class="n">be</span> <span class="n">materialized</span> <span class="n">by</span> <span class="n">a</span> <span class="o">[[</span><span class="kt">Materializer</span><span class="o">]].</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ClosedShape</span> <span class="k">extends</span> <span class="nc">Shape</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Graphs</h2>

<p>All of our examples so far have been very linear. There has been no way of splitting the stream to do different pieces of work, or combine multiple sources.</p>

<p>One use-case I can think of when using Akka Streams is to persist events on the stream to a database, in addition to continuing the stream processing.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Source &ndash;> Broadcast &ndash;> Flow &ndash;> Sink
</span><span class='line'>               |
</span><span class='line'>               &ndash;> Save to DB</span></code></pre></td></tr></table></div></figure></p>

<p>Akka Streams has a thing named <code>Broadcast</code> especially for this. However, constructing and using one is more complex than I imaged. You need to start using a mutable <code>GraphDSL.Builder</code>. The GraphDSL implies that we now need to learn what lots of funny symbols mean, such as <code>~&gt;</code>.</p>

<p>We need to build up a <code>Graph[ClosedShape, Mat]</code> where <code>Mat</code> is one of those Materializers that I still don&rsquo;t understand.</p>

<p>Interesting, it seems as though <code>Graph</code> doesn&rsquo;t type-check very well. It is possible to construct and run a Graph that doesn&rsquo;t do anything except fail at runtime. The following code gets checked via a <code>require</code> assertion when running the code:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">isRunnable</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">inPorts</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">outPorts</span><span class="o">.</span><span class="n">isEmpty</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I&rsquo;m not really sure how one would go about asserting this at compile-time. It definitely seems possible though, as other Scala libraries have similar builder patterns that type-check. Hopefully this will be addressed in a future release.</p>

<p>Anyway, lets try and build a Stream that saves events to a DB.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.</span><span class="o">{</span><span class="nc">Done</span><span class="o">,</span> <span class="nc">NotUsed</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">ExecutionContext</span><span class="o">,</span> <span class="nc">Future</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SendToDB</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">intSource</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">helloTimesTen</span><span class="k">:</span> <span class="kt">Flow</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Flow</span><span class="o">[</span><span class="kt">Int</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="s">&quot;Hello ${i * 10}&amp;ldquo;)</span>
</span><span class='line'><span class="s">  val intToEvent: Flow[Int, DB.Event, NotUsed] = Flow[Int].map(i =&gt; DB.Event(s&quot;</span><span class="nc">Event</span> <span class="nc">$i</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">printlnSink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Any</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Done</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">dbSink</span> <span class="k">=</span> <span class="nc">Flow</span><span class="o">[</span><span class="kt">DB.Event</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="nc">DB</span><span class="o">.</span><span class="n">persistEvent</span><span class="o">).</span><span class="n">toMat</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">right</span><span class="o">).</span><span class="n">named</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">dbSink</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">graph</span> <span class="k">=</span> <span class="nc">RunnableGraph</span><span class="o">.</span><span class="n">fromGraph</span><span class="o">(</span><span class="nc">GraphDSL</span><span class="o">.</span><span class="n">create</span><span class="o">()</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">builder</span><span class="k">:</span> <span class="kt">GraphDSL.Builder</span><span class="o">[</span><span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">GraphDSL.Implicits._</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">broadcast</span> <span class="k">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">Broadcast</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;2&quot;</span><span class="o">&gt;</span><span class="nc">Int</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">intSource</span> <span class="o">~&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">broadcast</span> <span class="o">~&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">helloTimesTen</span> <span class="o">~&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printlnSink</span>
</span><span class='line'>             <span class="n">broadcast</span> <span class="o">~&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">intToEvent</span> <span class="o">~&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">dbSink</span>
</span><span class='line'>
</span><span class='line'><span class="nc">ClosedShape</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">})&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">graph</span><span class="o">.</span><span class="n">run</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">DB</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Event</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">persistEvent</span><span class="o">(</span><span class="n">e</span><span class="k">:</span> <span class="kt">Event</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// pretend that some DB IO happens here</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;persisting $e&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">Future</span> <span class="o">{}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is a lot of new stuff here. Starting with the easiest thing; I&rsquo;ve renamed some vals to reflect what they do now. We also have a new <code>Flow</code> named <code>intToEvent</code> which maps an <code>Int</code> to a <code>DB.Event</code> case class.</p>

<p>We also have the <code>GraphDSL</code> syntax, and implicit conversions. <code>~&gt;</code> means &ldquo;Add Edge to Graph&rdquo; in my head. As DSLs go, it isn&rsquo;t too bad. Arrows are Stream processing go hand-in-hand. I&rsquo;ll try and use this syntax from now on.
The <code>Broadcast</code> class also checks at compile time that we&rsquo;ve linked all the specified &lsquo;ports&rsquo;. In our example, we create the <code>Broadcast</code> and say it will have two things listening to it. If we only connect, one, we get a runtime error.</p>

<p>Lastly, we have a new <code>Sink</code> named <code>dbSink</code>. I basically copied the code from inside the <code>printlnSink</code> and changed the <code>map</code> method. It seems as though in order to perform actions on a Stream, we need to materialize the values contained inside. I now assume that Streams are inherently lazy, and Materializing is the act of evaluating the Stream.</p>

<p>We need to dig into Materializers, and finally figure them out.</p>

<h2>Basic Materializer</h2>

<p>Having read the docs some more, it seems as though &ldquo;materialization&rdquo; is the thing that actually runs our Stream. When using Akka, actors are created (or materialized) in order to do the work. Makes sense. I can&rsquo;t help but feel that this should have been more obvious at the start&hellip;</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Source ~> Sink</span></code></pre></td></tr></table></div></figure></p>

<p>We return to the simplest graph, with just a Source and a Sink. The Source generates Ints, and the Sink just takes the first one.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.NotUsed</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">scala.concurrent.duration.Duration</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">Await</span><span class="o">,</span> <span class="nc">Future</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">BasicMaterializer</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">intSource</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">headSink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">head</span><span class="o">[</span><span class="kt">Int</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">graph1</span><span class="k">:</span> <span class="kt">RunnableGraph</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="n">intSource</span><span class="o">.</span><span class="n">toMat</span><span class="o">(</span><span class="n">headSink</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">right</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph2</span><span class="k">:</span> <span class="kt">RunnableGraph</span><span class="o">[</span><span class="kt">NotUsed</span><span class="o">]</span>     <span class="k">=</span> <span class="n">intSource</span><span class="o">.</span><span class="n">toMat</span><span class="o">(</span><span class="n">headSink</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">left</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// we can only get values from graph1</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">graph1</span><span class="o">.</span><span class="n">run</span><span class="o">(),</span> <span class="nc">Duration</span><span class="o">(</span><span class="mi">3</span><span class="o">,&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">seconds</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">println</span><span class="o">(</span><span class="n">result</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I&rsquo;ve included code of two RunnableGraphs. They only vary in second arguments; <code>Keep.right</code> versus <code>Keep.left</code>. This seems to be the key to Materializers, and the mysterious second type parameter included everywhere in our Source, Flows, and Sinks.</p>

<p>In order to get any values out of a Stream flowing left to right, we need to keep the right values. Presumably, in a stream going the other way, we need to keep the left values. In our case, the right side of our graph has <code>Future[Int]</code> as the second type parameter. This is the one we need.</p>

<p>The types on these methods are very obvious; given two types select the one on the left, or the right.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">left</span> <span class="o">[</span><span class="kt">L</span>, <span class="kt">R</span><span class="o">]</span><span class="k">:</span> <span class="o">(</span><span class="kt">L</span><span class="o">,</span> <span class="kt">R</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">L</span>
</span><span class='line'><span class="k">def</span> <span class="n">right</span><span class="o">[</span><span class="kt">L</span>, <span class="kt">R</span><span class="o">]</span><span class="k">:</span> <span class="o">(</span><span class="kt">L</span><span class="o">,</span> <span class="kt">R</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">R</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This now also answers my questions above about the previously used <code>Sink</code> named <code>dbSink</code>. Here&rsquo;s the implementation again:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Flow</span><span class="o">[</span><span class="kt">DB.Event</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="nc">DB</span><span class="o">.</span><span class="n">persistEvent</span><span class="o">).</span><span class="n">toMat</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">right</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>DB.persistEvent</code> returns a <code>Future[Unit]</code>. In order to actually evalutate these Futures, we need to materialize the stream. As we&rsquo;re Keeping right, we pass our futures into <code>Sink.ignore</code>. If we kept left, we pass <code>NotUsed</code>. Whilst ignoring them doesn&rsquo;t sound very useful, this actually runs them before ignoring whatever they return.</p>

<p>I feel like I understand roughly how Akka Streams work now.</p>

<p>Here&rsquo;s a recap.</p>

<ul>
<li>Sources generate values.</li>
<li>Sinks consume values.</li>
<li>Materialization is the process of running the Stream, and getting your Sink to do something.</li>
<li>Flows are linear transformations.</li>
<li>Graphs can be modelled with Broadcast (and Merge, but we didn&rsquo;t try them out).</li>
</ul>


<p>This is enough blog post for now. I&rsquo;d like to continue learning Akka Streams; they seem a lot easier to use than Actors, and patterns are built in. Streams are more type-safe than Actors too, which hopefully will permit writing more maintainable code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Play-Framework's PathBindable]]></title>
    <link href="http://cjwebb.github.io/blog/2015/06/23/play-framework-path-binders/"/>
    <updated>2015-06-23T19:45:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2015/06/23/play-framework-path-binders</id>
    <content type="html"><![CDATA[<p>Using custom types in <a href="https://www.playframework.com/documentation/2.4.x/ScalaRouting">Play Framework’s routes file</a> is a major win, and is not something obviously supported. Consider the routes file below:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">GET</span> <span class="o">/</span><span class="n">stuff</span><span class="o">/:</span><span class="n">id</span>     <span class="nd">@controllers</span><span class="o">.</span><span class="nc">StuffController</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'><span class="nc">GET</span> <span class="o">/</span><span class="n">things</span><span class="o">/:</span><span class="n">id</span>    <span class="nd">@controllers</span><span class="o">.</span><span class="nc">ThingsController</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">java.util.UUID</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In the first route, we take the id parameter as a String. In the second, we take it as a <code>java.util.UUID</code>.</p>

<h2>Advantages</h2>

<p>In our example above, paths that do not contains UUIDs are not matched for the second route. We don’t have to deal with IDs that are not UUIDs.</p>

<p>At the start of a project, you may see lots of lines that say:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">i</span> <span class="k">if</span> <span class="n">isUUID</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">doStuff</span><span class="o">()</span>
</span><span class='line'>   <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">BadRequest</span><span class="o">(</span><span class="err">“</span><span class="n">id</span> <span class="n">must</span> <span class="n">be</span> <span class="n">a</span> <span class="nc">UUID</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>By not matching on the route, we can remove this code. A request either matches a route, and is passed to the controller, or it doesn’t, and the controller never knows about the request.</p>

<p>By allowing types, and not just strings, you can avoid <a href="http://c2.com/cgi/wiki?StringlyTyped">stringly-typed</a> controllers. Admittedly, UUIDly-typed is only a small step in the right direction, but still a significant improvement.</p>

<h2>Disadvantages</h2>

<p>You need to fully-qualify the types in the routes file, for example by using <code>java.util.UUID</code> everywhere. You cannot use imports in the routes file. Hopefully someone will find a solution to that at some point.</p>

<h2>Implementation</h2>

<p>There are two things that need doing before you can use custom types in the routes file. Firstly, you must implement a <code>PathBindable</code> and its <code>bind</code> and <code>unbind</code> methods. For a UUID, this is quite simple. The <code>bind</code> method returns an <code>Either</code> so that you can return the a message for why the route did not match.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">util</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">java.util.UUID</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc.PathBindable</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">Binders</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">implicit</span> <span class="k">def</span> <span class="n">uuidPathBinder</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PathBindable</span><span class="o">[</span><span class="kt">UUID</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">bind</span><span class="o">(</span><span class="n">key</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Either</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">UUID</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="nc">Right</span><span class="o">(</span><span class="nc">UUID</span><span class="o">.</span><span class="n">fromString</span><span class="o">(</span><span class="n">value</span><span class="o">))</span>
</span><span class='line'>         <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">IllegalArgumentException</span> <span class="o">=&gt;</span> <span class="nc">Left</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Id</span> <span class="n">must</span> <span class="n">be</span> <span class="n">a</span> <span class="nc">UUID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">unbind</span><span class="o">(</span><span class="n">key</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Secondly, you must make Play aware of this class, by changing your build file.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.PlayImport.PlayKeys._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">routesImport</span> <span class="o">+=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">utils</span><span class="o">.</span><span class="nc">Binders</span><span class="o">.</span><span class="k">_</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>After those two steps, you can then use types in the routes file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaTest and Twitter Futures]]></title>
    <link href="http://cjwebb.github.io/blog/2015/02/02/scalatest-futures/"/>
    <updated>2015-02-02T19:45:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2015/02/02/scalatest-futures</id>
    <content type="html"><![CDATA[<p>Scala has nice abstractions for asynchronous code. However, writing tests for that code sometimes results in an ugly, unreadable mess. Fortunately, ScalaTest has built-in support for testing Futures, in addition to utilities for other types of asynchronous testing, such as polling and test-probes.</p>

<h2>org.scalatest.concurrent.Futures</h2>

<p>ScalaTest has <a href="http://doc.scalatest.org/2.0/#org.scalatest.concurrent.Futures">a trait named Futures</a> which defines functions such as <code>whenReady</code>, and other goodies like a <code>futureValue</code> method to help your async tests become terser. However, ScalaTest only comes with support for the standard-library Futures. To use them, mixin <code>org.scalatest.concurrent.ScalaFutures</code>.</p>

<p>If, currently like me, you&rsquo;re using <a href="https://twitter.github.io/finagle/guide/Futures.html#futures">Twitter Futures</a>, then you need to define your own support for them. Luckily, it is quite easy to define support for any Futures library.</p>

<p>Behold a TwitterFutures trait:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">com.twitter.util.</span><span class="o">{</span><span class="nc">Throw</span><span class="o">,</span> <span class="nc">Return</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.concurrent.Futures</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">trait</span> <span class="nc">TwitterFutures</span> <span class="k">extends</span> <span class="nc">Futures</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">import</span> <span class="nn">scala.language.implicitConversions</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">convertTwitterFuture</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;twitterFuture:%20com.twitter.util.Future[T]&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">FutureConcept</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">FutureConcept</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">eitherValue</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Either</span><span class="o">[</span><span class="kt">Throwable</span>, <span class="kt">T</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">twitterFuture</span><span class="o">.</span><span class="n">poll</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Return</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Right</span><span class="o">(</span><span class="n">o</span><span class="o">)</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Throw</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="nc">Left</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">isCanceled</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">isExpired</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You may also have to define an implicit <code>PatienceConfig</code> for your tests as the default settings will timeout after 150 milliseconds.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">asyncConfig</span> <span class="k">=</span> <span class="nc">PatienceConfig</span><span class="o">(</span><span class="n">timeout</span> <span class="k">=</span> <span class="n">scaled</span><span class="o">(</span><span class="nc">Span</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="nc">Seconds</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Polling?</h2>

<p>Strangely, ScalaTest chooses to poll futures, despite both Scala and Twitter Futures coming with <code>Await</code> functions that handle timeouts. Using that as a starting point would have seemed more sensible to me. However, I&rsquo;m not the author of a successful Scala testing library, and I&rsquo;m sure that author <a href="http://twitter.com/bvenners">Bill Venners</a> had a reason. However, it is worth noting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monoids]]></title>
    <link href="http://cjwebb.github.io/blog/2014/10/02/monoids/"/>
    <updated>2014-10-02T22:00:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2014/10/02/monoids</id>
    <content type="html"><![CDATA[<blockquote><p>In abstract algebra, a branch of mathematics, a monoid is an algebraic structure with a single associative binary operation and an identity element. Monoids are studied in semigroup theory as they are semigroups with identity.</p></blockquote>

<p><a href="http://en.wikipedia.org/wiki/Monoid">Wikipedia has the above definition of a Monoid</a>. This blog post will desconstruct that definition to simply describe what a monoid is, and why you would want to use one.</p>

<p>We will, however, ignore a proper defintion of &lsquo;abstract algebra&rsquo; as that would mean writing several textbooks. Just imagine an &lsquo;algebraic structure&rsquo; as a thing that contains functions. A &lsquo;thing that contains functions&rsquo; is sometimes named a class in programming languages.</p>

<p>So, with that out of the way, this is the list of things we will cover:</p>

<ul>
<li>Associative</li>
<li>Semigroup</li>
<li>Identity</li>
</ul>


<h2>Associative</h2>

<p>You should have learnt some associative things during Mathematics lessons at primary school. Addition and Multiplication are associative. Subtraction and Division are not. Associativity means that you can reorder operations on a list of things, and always receive the same result.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">((((</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="mi">3</span><span class="o">)</span> <span class="o">+</span> <span class="mi">4</span><span class="o">)</span> <span class="o">+</span> <span class="mi">5</span><span class="o">)</span> <span class="k">=</span> <span class="mi">15</span>
</span><span class='line'><span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="mi">2</span> <span class="o">+</span> <span class="o">(</span><span class="mi">3</span> <span class="o">+</span> <span class="o">(</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">5</span><span class="o">))))</span> <span class="k">=</span> <span class="mi">15</span> <span class="c1">// reordered, same result</span>
</span><span class='line'><span class="o">((((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span> <span class="o">-</span> <span class="mi">3</span><span class="o">)</span> <span class="o">-</span> <span class="mi">4</span><span class="o">)</span> <span class="o">-</span> <span class="mi">5</span><span class="o">)</span> <span class="k">=</span> <span class="o">-</span><span class="mi">13</span>
</span><span class='line'><span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="o">(</span><span class="mi">2</span> <span class="o">-</span> <span class="o">(</span><span class="mi">3</span> <span class="o">-</span> <span class="o">(</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">5</span><span class="o">))))</span> <span class="k">=</span> <span class="mi">3</span> <span class="c1">// reordered, different result</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Semigroup</h2>

<p>Semigroup is the name for a thing that provides an associative function. For Integers, <code>+</code> and <code>*</code> are associative functions. A Semigroup is one of those &ldquo;algebraic structures&rdquo;, and it has one function; an associative one.</p>

<p>It would looks like this, for adding up Integers:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">AdditionSemigroup</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">associative</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It is worth noting that a Semigroup will apply to a whole type. This Semigroup will apply to all <code>Int</code>, as denoted by the square brackets after the class name. The example is written in Scala, where <code>Int</code> is an alias for <code>Integer</code>.</p>

<h2>Identity</h2>

<p>Also known as the zero value, or the &lsquo;value for which nothing happens&rsquo;. This will depend on what your monoid does. For instance, for an adding monoid, the identity value will be zero. Adding zero to <code>x</code> gives you <code>x</code>. For multiplication, the identity value will be 1. Multiplying 1 by <code>x</code> gives you <code>x</code>. If we had kept the identity value as zero, multiplying <code>x</code> by zero would return zero, thereby being useless. Likewise, any other value would mess up our calculation.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>     <span class="k">=</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">0</span> <span class="k">=</span> <span class="mi">2</span> <span class="c1">// we can add an &amp;lsquo;identity&amp;rsquo; of zero at any point</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span>     <span class="k">=</span> <span class="mi">16</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">1</span> <span class="k">=</span> <span class="mi">16</span> <span class="c1">// we can add an &amp;lsquo;identity&amp;rsquo; of 1 at any point.</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">0</span> <span class="k">=</span> <span class="mi">0</span>  <span class="c1">// an &amp;lsquo;identity&amp;rsquo; of zero doesn&amp;rsquo;t work for multiplication</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">=</span> <span class="mi">32</span> <span class="c1">// neither does any other value. It has to be 1!</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>So what is a monoid?</h2>

<p>A monoid, has an associative function, and it has an identity function. As you may be able to tell from the wikipedia description, it really is a Semigroup, but with an identity function.</p>

<p>As shown above, the <code>+</code> operator on Integers is associative, and we know that the zero value for this is <code>0</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">AdditionMonoid</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">identity</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">associative</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Why is this useful?</h2>

<p>Consider the following Scala example. <code>|+|</code> is an alias for our previously-seen associative method. This particular associative method (<a href="https://github.com/scalaz/scalaz/blob/49b235695f1d3ae3217a70b419cbb33337f31ade/core/src/main/scala/scalaz/std/Map.scala#L113">taken from scalaz</a>) merges two Maps together by summing the values if the keys are equal.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scalaz.Scalaz._</span> <span class="c1">// this defines the |+| operator.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Map</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="mf">1.0</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">)</span> <span class="o">|+|</span> <span class="nc">Map</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">)</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Map</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mf">0.0</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can also take advantage of the <code>reduce</code> method to do this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Map</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="mf">1.0</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">),</span> <span class="nc">Map</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">)).</span><span class="n">reduce</span><span class="o">(&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">|+|</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Map</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mf">0.0</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If you can define your problem as a Monoid, it becomes trivial to compute, and trivial to parallelise too. Remember, associative functions can be batched and executed in any order.</p>

<p>Hopefully it is becoming clear why this is useful. If you want to add Integers together, most languages already include basic addition. However, Monoids can potentially be written for any type of data. As long as you define <code>identity</code> and <code>associative</code>, they can do anything you want!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aggregation Services using Play JSON]]></title>
    <link href="http://cjwebb.github.io/blog/2014/03/26/aggregation-service-using-play-json/"/>
    <updated>2014-03-26T19:30:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2014/03/26/aggregation-service-using-play-json</id>
    <content type="html"><![CDATA[<p>Aggregation services (sometimes known as Composite or Hydration services) are useful when working in SOA. In SOA, services are responsible for discrete objects and collections, yet still often need to reference other object or collections controlled by another service. This is done via referencing Ids. In order to display something useful to the user it is necessary to lookup data from multiple sources and aggregate them together.</p>

<p>Let&rsquo;s look at an example, containing one of my favourite foods:</p>

<h2>Mmm, Sandwiches</h2>

<p>Colin’s Sandwich Shop has a website, that along with selling and delivering sandwiches, also writes a few articles about topical events in the sandwich industry. These articles also contain relevant sandwiches, which the reader will hopefully then purchase.</p>

<p>They have the following APIs, starting with the Article Service:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /article/a1</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;a1&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;title&amp;rdquo;:</span> <span class="err">&amp;ldquo;Top</span> <span class="err">3</span> <span class="err">Sandwiches&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;content&amp;rdquo;:</span> <span class="err">&amp;ldquo;They</span> <span class="err">all</span> <span class="err">contain</span> <span class="err">bacon.&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;product_list&amp;rdquo;:</span> <span class="err">[</span>
</span><span class='line'>    <span class="err">&amp;ldquo;s1&amp;rdquo;,</span> <span class="err">&amp;ldquo;s2&amp;rdquo;,</span> <span class="err">&amp;ldquo;s3&amp;rdquo;</span>
</span><span class='line'>  <span class="err">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice that <code>product_list</code> contains only identifiers, not full products.</p>

<p>The sandwich shop also has a product API, which enables lookup of a product by id:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /product/s1</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;s1&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;Chicken</span> <span class="err">&amp;amp;</span> <span class="err">Bacon&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;image&amp;rdquo;:</span> <span class="err">&amp;ldquo;img/sandwich/s1.jpg&amp;rdquo;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In order to display the articles, the consumer of the API needs to fetch the article, fetch all the products in <code>product_list</code> and then aggregate the results.</p>

<p>The API of the aggregation service would therefore be:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /article/a1</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;a1&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;title&amp;rdquo;:</span> <span class="err">&amp;ldquo;Top</span> <span class="err">3</span> <span class="err">Sandwiches&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;content&amp;rdquo;:</span> <span class="err">&amp;ldquo;They</span> <span class="err">all</span> <span class="err">contain</span> <span class="err">bacon.&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;product_list&amp;rdquo;:</span> <span class="err">[</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;s1&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;Club</span> <span class="err">Sandwich&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;image&amp;rdquo;:</span> <span class="err">&amp;ldquo;img/sandwich/s1.jpg&amp;rdquo;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;s2&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;Chicken</span> <span class="err">&amp;amp;</span> <span class="err">Bacon&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;image&amp;rdquo;:</span> <span class="err">&amp;ldquo;img/sandwich/s2.jpg&amp;rdquo;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;s3&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;BLT&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;image&amp;rdquo;:</span> <span class="err">&amp;ldquo;img/sandwich/s3.jpg&amp;rdquo;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Is Scala the right tool?</h2>

<p>When faced with constructing an aggregation service in Scala most people start by defining the case classes they will need to model the data. This is the workflow, if you convert to case classes:</p>

<blockquote><p>Read JSON -> Convert to case classes -> Change stuff -> Write JSON</p></blockquote>

<p>We obviously need to read JSON from somewhere. We need to change stuff about it, and we need to write it back out again. What exactly does converting to case classes give us? It does have very apparent drawbacks:</p>

<h3>Advantages of converting to case-classes</h3>

<ul>
<li>We can easily fetch fields</li>
<li>Normal Scala static typing</li>
</ul>


<h3>Disadvantages of converting to case-classes</h3>

<ul>
<li>Need to write and maintain the case classes.</li>
<li>Need to write and maintain lenses, or zippers, to update nested immutable data.</li>
<li>If JSON contains more than 22 fields, Scala case classes are useless.</li>
</ul>


<p>Writing <a href="http://stackoverflow.com/questions/3900307/cleaner-way-to-update-nested-structures">Lenses or Zippers</a> is required for updating nested immutable case classes. Using the standard library to do this is not pretty.</p>

<p>However, the biggest cost of this method is the maintenance of the cases classes and the lenses/zippers. If the Article service starts returning more data, we have to update the aggregation service too. Similarly, if the product service returns more data, we have to update the aggregation service again.</p>

<p>Converting the JSON to case classes is very rigid. It would be nice if the data just flowed through the aggregation service, and we could apply transformations to it:</p>

<blockquote><p>Read JSON -> Change stuff -> Write JSON</p></blockquote>

<p>The alternatives to using Scala case-classes are to ignore type-safey, and model everything as a <code>Map[Any]</code>. If we&rsquo;re doing that, we may as well use a dynamic language. Aggregation services in JavaScript, Python or Clojure are probably quite nice too.</p>

<p>Or we stick with Scala, and use <a href="http://www.playframework.com/documentation/2.2.x/ScalaJson">Play JSON</a> and <a href="https://github.com/mandubian/play-json-zipper">Play-JSON-zipper</a>.</p>

<h2>Play JSON Transformations</h2>

<p>Play&rsquo;s JSON library provides something akin to <a href="http://goessner.net/articles/JsonPath/">JSONPath</a> functionality. We can search for, update, or delete anything we want to. Let&rsquo;s continue our example, and look at how an aggregation service for Colin&rsquo;s Sandwich Shop could be built.</p>

<p>How do we find all the product ids from some JSON? Easy! We use the recursive search of Play JSON to find anything named &ldquo;product_list&rdquo;, and can be read as <code>List[String]</code>. The symbol <code>\\</code> will return a list of matches, which we then convert to <code>List[String]</code> and flatten.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">findProductIds</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="o">(</span><span class="n">articleJson</span> <span class="o">\</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">product_list</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]])</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatten</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Pretty simple. How then do we update the JSON, given a map of Products by ProductId? Play JSON is limited in this regard, and I&rsquo;ve found the easiest way is to use <a href="https://github.com/mandubian/play-json-zipper">Play-Json-Zipper</a> instead.</p>

<p>The method <code>updateAll</code> takes a <code>PartialFunction[(JsPath, JsValue), JsValue])</code> so we can limit the scope of the update, and then replace ids with fully-fledged products.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">replaceProductIdsWithProducts</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">,</span>
</span><span class='line'>                                  <span class="n">productMap</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">JsValue</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="k">:</span> <span class="kt">JsPath</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">JsPathExtension</span><span class="o">.</span><span class="n">hasKey</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Some</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">product_list</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">.</span><span class="n">collect</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">productMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">}.</span><span class="n">flatten</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">articleJson</span><span class="o">.</span><span class="n">updateAll</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">jsPath</span><span class="o">,</span> <span class="nc">JsArray</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span> <span class="k">if</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">JsArray</span><span class="o">(</span><span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>These two simple functions provide the only complexity of the aggregation service. The rest is just manipulating <code>Future</code> to fetch the article, products, and return a result. In the end, we can do the entire workflow in about 50 lines of code.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">Await</span><span class="o">,</span> <span class="nc">Future</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.duration.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.extensions._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">Main</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="mi">1</span> <span class="n">second</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">actorSystem</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">dispatcher</span> <span class="k">=</span> <span class="n">actorSystem</span><span class="o">.</span><span class="n">dispatcher</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">articleApi</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ArticleApi</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">productApi</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ProductApi</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">findProductIds</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="o">(</span><span class="n">articleJson</span> <span class="o">\</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">product_list</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]])</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatten</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">fetchProducts</span><span class="o">(</span><span class="n">productIds</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">JsValue</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Future</span><span class="o">.</span><span class="n">traverse</span><span class="o">(</span><span class="n">productIds</span><span class="o">){</span> <span class="n">id</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">productApi</span><span class="o">.</span><span class="n">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="n">map</span> <span class="o">(</span><span class="n">pOpt</span> <span class="k">=&gt;</span> <span class="n">pOpt</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">p</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">p</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">}</span> <span class="n">map</span> <span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">toMap</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">replaceProductIdsWithProducts</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">productMap</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">JsValue</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="k">:</span> <span class="kt">JsPath</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">JsPathExtension</span><span class="o">.</span><span class="n">hasKey</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Some</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">product_list</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">arr</span><span class="o">.</span><span class="n">collect</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">productMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">}.</span><span class="n">flatten</span>
</span><span class='line'>
</span><span class='line'><span class="n">articleJson</span><span class="o">.</span><span class="n">updateAll</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="n">jsPath</span><span class="o">,</span> <span class="nc">JsArray</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span> <span class="k">if</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="nc">JsArray</span><span class="o">(</span><span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">transform</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">article</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">articleApi</span><span class="o">.</span><span class="n">getArticle</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">a1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>      <span class="n">productIds</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="nc">Future</span> <span class="o">{</span> <span class="n">findProductIds</span><span class="o">(</span><span class="n">article</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">products</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">fetchProducts</span><span class="o">(</span><span class="n">productIds</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">replaceProductIdsWithProducts</span><span class="o">(</span><span class="n">article</span><span class="o">,</span> <span class="n">products</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">println</span><span class="o">(</span><span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">transform</span><span class="o">(),</span> <span class="mi">2</span> <span class="n">seconds</span><span class="o">))</span>
</span><span class='line'>  <span class="n">actorSystem</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As per usual, <a href="https://github.com/cjwebb/blog-code/tree/master/aggregation-services">working code is available on Github</a>.</p>
]]></content>
  </entry>
  
</feed>
