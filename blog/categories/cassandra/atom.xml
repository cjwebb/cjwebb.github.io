<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cassandra | cjwebb.github.io]]></title>
  <link href="http://cjwebb.github.io/blog/categories/cassandra/atom.xml" rel="self"/>
  <link href="http://cjwebb.github.io/"/>
  <updated>2016-11-20T15:02:26+00:00</updated>
  <id>http://cjwebb.github.io/</id>
  <author>
    <name><![CDATA[Colin Webb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cassandra TTL Is Per Column]]></title>
    <link href="http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column/"/>
    <updated>2015-03-02T11:30:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column</id>
    <content type="html"><![CDATA[<p><a href="http://cassandra.apache.org/">Cassandra</a> Time-To-Live (TTL) is decribed in the <a href="http://www.datastax.com/documentation/cql/3.0/cql/cql_using/use_ttl_t.html">Datastax documentation</a>. This blog post briefly explores it to demonstrate that TTL is set per column, and not per row.</p>

<p>We start by recreating the example given in the documentation. We create a keyspace, a table, and insert some data into it. The TTL value is much lower than the offical documentation, as I don&rsquo;t want to wait 24 hours before the TTL runs out.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> CREATE KEYSPACE excelsior WITH REPLICATION =
</span><span class='line'>         { &lsquo;class&rsquo; : &lsquo;SimpleStrategy&rsquo;, &lsquo;replication_factor&rsquo;: 1 }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cqlsh> CREATE TABLE excelsior.clicks (
</span><span class='line'>         userid uuid,
</span><span class='line'>         url text,
</span><span class='line'>         date timestamp,
</span><span class='line'>         name text,
</span><span class='line'>         PRIMARY KEY (userid, url)
</span><span class='line'>       );&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, date, name)
</span><span class='line'>       VALUES (
</span><span class='line'>         3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>         &lsquo;&lt;a href="http://apache.org">http://apache.org&lt;/a>&rsquo;,
</span><span class='line'>         &lsquo;2013-10-09&rsquo;, &lsquo;Mary&rsquo;)
</span><span class='line'>       USING TTL 60;</span></code></pre></td></tr></table></div></figure></p>

<p>Now that we have created our keyspace and table, let&rsquo;s query the TTL:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2> ttl(date) | ttl(name)&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    52 |        52
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>Insert or Update to change TTL per column</h2>

<p>As demonstrated by the CQL synatx, TTL is set per column. To demonstrate this, we now insert the data again, but exclude the date.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, name)
</span><span class='line'>         VALUES (
</span><span class='line'>           3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>           &lsquo;&lt;a href="http://apache.org">http://apache.org&lt;/a>&rsquo;,
</span><span class='line'>           &lsquo;Mary&rsquo;)
</span><span class='line'>         USING TTL 60;
</span><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> ttl(date) | ttl(name)
</span><span class='line'>&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;
</span><span class='line'>        11 |        49</span></code></pre></td></tr></table></div></figure></p>

<p>If we then wait 11 seconds, we can see that different columns can expire at different times.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> select * from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> userid                               | url               | date | name
</span><span class='line'>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&mdash;
</span><span class='line'> 3715e600-2eb0-11e2-81c1-0800200c9a66 | &lt;a href="http://apache.org">http://apache.org&lt;/a> | null | Mary</span></code></pre></td></tr></table></div></figure></p>

<p>This can come as a surprise if you&rsquo;re used to rows behaving as one single entity. If you want to update the TTL for an entire row in Cassandra, you need to either insert or update the entire row again with a new TTL.</p>
]]></content>
  </entry>
  
</feed>
