<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: database | cjwebb.github.io]]></title>
  <link href="http://cjwebb.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://cjwebb.github.io/"/>
  <updated>2016-12-16T20:12:08+00:00</updated>
  <id>http://cjwebb.github.io/</id>
  <author>
    <name><![CDATA[Colin Webb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cassandra TTL Is Per Column]]></title>
    <link href="http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column/"/>
    <updated>2015-03-02T11:30:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column</id>
    <content type="html"><![CDATA[<p><a href="http://cassandra.apache.org/">Cassandra</a> Time-To-Live (TTL) is decribed in the <a href="http://www.datastax.com/documentation/cql/3.0/cql/cql_using/use_ttl_t.html">Datastax documentation</a>. This blog post briefly explores it to demonstrate that TTL is set per column, and not per row.</p>

<p>We start by recreating the example given in the documentation. We create a keyspace, a table, and insert some data into it. The TTL value is much lower than the offical documentation, as I don&rsquo;t want to wait 24 hours before the TTL runs out.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> CREATE KEYSPACE excelsior WITH REPLICATION =
</span><span class='line'>         { &lsquo;class&rsquo; : &lsquo;SimpleStrategy&rsquo;, &lsquo;replication_factor&rsquo;: 1 }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cqlsh> CREATE TABLE excelsior.clicks (
</span><span class='line'>         userid uuid,
</span><span class='line'>         url text,
</span><span class='line'>         date timestamp,
</span><span class='line'>         name text,
</span><span class='line'>         PRIMARY KEY (userid, url)
</span><span class='line'>       );&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, date, name)
</span><span class='line'>       VALUES (
</span><span class='line'>         3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>         &lsquo;&lt;a href="http://apache.org">http://apache.org&lt;/a>&rsquo;,
</span><span class='line'>         &lsquo;2013-10-09&rsquo;, &lsquo;Mary&rsquo;)
</span><span class='line'>       USING TTL 60;</span></code></pre></td></tr></table></div></figure></p>

<p>Now that we have created our keyspace and table, let&rsquo;s query the TTL:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2> ttl(date) | ttl(name)&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    52 |        52
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>Insert or Update to change TTL per column</h2>

<p>As demonstrated by the CQL synatx, TTL is set per column. To demonstrate this, we now insert the data again, but exclude the date.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, name)
</span><span class='line'>         VALUES (
</span><span class='line'>           3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>           &lsquo;&lt;a href="http://apache.org">http://apache.org&lt;/a>&rsquo;,
</span><span class='line'>           &lsquo;Mary&rsquo;)
</span><span class='line'>         USING TTL 60;
</span><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> ttl(date) | ttl(name)
</span><span class='line'>&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;
</span><span class='line'>        11 |        49</span></code></pre></td></tr></table></div></figure></p>

<p>If we then wait 11 seconds, we can see that different columns can expire at different times.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> select * from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> userid                               | url               | date | name
</span><span class='line'>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&mdash;
</span><span class='line'> 3715e600-2eb0-11e2-81c1-0800200c9a66 | &lt;a href="http://apache.org">http://apache.org&lt;/a> | null | Mary</span></code></pre></td></tr></table></div></figure></p>

<p>This can come as a surprise if you&rsquo;re used to rows behaving as one single entity. If you want to update the TTL for an entire row in Cassandra, you need to either insert or update the entire row again with a new TTL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MongoDB TTL Collections to Manage User Registrations]]></title>
    <link href="http://cjwebb.github.io/blog/2012/12/17/mongodb-ttl-collections/"/>
    <updated>2012-12-17T11:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2012/12/17/mongodb-ttl-collections</id>
    <content type="html"><![CDATA[<p><a href="https://docs.mongodb.com/manual/tutorial/expire-data/">TTL Collections</a> were introduced in MongoDB 2.2. You are now able to create an index which triggers the deletion of a document after the TTL time passes.</p>

<p>One such use of TTL collections is temporarily storing user sign-ups. A common solution for a website to verify a user’s email address is to send the user a link to click on to activate their account. TTL collections can be used to remove users who never activate their account. This was the solution I used when implementing a web app.</p>

<p>Suppose we have If we have two collections inside MongoDB: user_invites, users. We then follow this flow:</p>

<ul>
<li>User fills in web-form with their invite code.</li>
<li>Upon submission, a UUID is generated.</li>
<li>We create a new document in user_invites, with all their details and the UUID:</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;_id&rdquo; : ObjectId(“505a1614001b9c1a9cb10803"),
</span><span class='line'>  &ldquo;password&rdquo; : &ldquo;$2a$12$vCew7zzXqtyRGKQV4xfSZ.KbmmCRMx.pVJD6DesTLrOvuUghB5Oeu&rdquo;,
</span><span class='line'>  &ldquo;expiry_time&rdquo; : ISODate(“2012-10-21T18:59:31.753Z"),
</span><span class='line'>  &ldquo;invite_code&rdquo; : &ldquo;an-invite-code&rdquo;,
</span><span class='line'>  &ldquo;activation_code&rdquo; : &ldquo;cbcff14&rdquo;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>We send the user an email to the email address they specified, with a URL to click on. This URL contains the UUID.</li>
<li>When the link is clicked on, we look up the user by the UUID and move all the information into the users collections.</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;_id&rdquo; : ObjectId(&ldquo;504ae6e2001b9c0548ab0b64&rdquo;),
</span><span class='line'>  &ldquo;password&rdquo; : &ldquo;$2a$12$vCew7zzXqtyRGKQV4xfSZ.KbmmCRMx.pVJD6DesTLrOvuUghB5Oeu&rdquo;,
</span><span class='line'>  &ldquo;email&rdquo; : &ldquo;&lt;a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x61;&#x6e;&#95;&#101;&#x6d;&#x61;&#105;&#108;&#x40;&#97;&#100;&#100;&#114;&#x65;&#115;&#x73;&#x2e;&#x63;&#111;&#109;">&#97;&#x6e;&#x5f;&#x65;&#109;&#x61;&#x69;&#108;&#64;&#97;&#x64;&#100;&#114;&#x65;&#115;&#x73;&#46;&#99;&#111;&#x6d;&lt;/a>&rdquo;,
</span><span class='line'>  &ldquo;created_date&rdquo; : ISODate(“2012-09-18T18:59:31.753Z")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>If the URL is never clicked on, a background MongoDb process deletes the user_invite document after the time specified in the TTL index.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;v&rdquo; : 1,
</span><span class='line'>  &ldquo;key&rdquo; : { &ldquo;expiry_time&rdquo; : 1 },
</span><span class='line'>  &ldquo;ns&rdquo; : &ldquo;colin.user_invites&rdquo;,
</span><span class='line'>  &ldquo;name&rdquo; : &ldquo;expiry_time_1&rdquo;,
</span><span class='line'>  &ldquo;expireAfterSeconds&rdquo; : 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>Using this method, we can be sure that our users have a valid email address, and that they’ve actually visited the site.</p>
]]></content>
  </entry>
  
</feed>
