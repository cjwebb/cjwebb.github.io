<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: database | cjwebb.github.io]]></title>
  <link href="http://cjwebb.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://cjwebb.github.io/"/>
  <updated>2017-01-02T11:21:06+00:00</updated>
  <id>http://cjwebb.github.io/</id>
  <author>
    <name><![CDATA[Colin Webb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DynamoDB with Scala Macros]]></title>
    <link href="http://cjwebb.github.io/blog/2017/01/02/dynamodb-scala-macros/"/>
    <updated>2017-01-02T11:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2017/01/02/dynamodb-scala-macros</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve spent the last year using <a href="https://aws.amazon.com/documentation/dynamodb/">AWS DynamoDB</a> at work. When we initially searched for a Scala client for DynamoDB, we had the following criteria:</p>

<ul>
<li>Good for Scala beginners</li>
<li>Up to date</li>
<li>Well documented</li>
</ul>


<p>Sadly, none of the Scala libraries available at that time matched all three criteria. The most up-to-date libraries were not suitable for a team starting out with Scala and DynamoDB. The most beginner-friendly libraries were out-of-date, and most only had superficial documentation.</p>

<p>The closest to matching all three criteria was the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/gettingstartedguide/GettingStarted.Java.html">official AWS SDK</a>, but it was written in Java. We used eventually used a thin layer of Scala Macros to make it nicer to use for Scala beginners, and experts alike.</p>

<h2>Plain Old Java DynamoDB API</h2>

<p>The Java DynamoDB SDK is not pleasant to use. There is a lot of boilerplate.</p>

<p>In order to do simple inserts, you must construct a <code>java.util.Map[String, AttributeValue]</code>. For a simple case class, this conversion is simple:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">SimpleCaseClass</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">format</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">SimpleCaseClass</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Map</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">AttributeValue</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="n">id</span><span class="o">),</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">AttributeValue</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'><span class="o">).</span><span class="n">asJava</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For nested case classes, this gets ugly.
In order to place a nested structure into DynamoDB, you must construct another map of <code>AttributeValue</code> inside of a <code>AttributeValue().withM</code>, where <code>withM</code> means <code>withMap</code>. DynamoDB has a few abbreviations like <code>M</code>, <code>N</code>, <code>S</code>, which are the type of data you&rsquo;re sending to Dynamo. <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBMapper.DataTypes.html">You can read the full list on the official docs</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">SimpleCaseClass</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">NestedCaseClass</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">simple</span><span class="k">:</span> <span class="kt">SimpleCaseClass</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">NestedCaseClass</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Map</span> <span class="o">(</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">AttributeValue</span><span class="o">(</span><span class="n">id</span><span class="o">),</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simple</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">AttributeValue</span><span class="o">().</span><span class="n">withM</span><span class="o">(</span><span class="nc">Map</span><span class="o">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">AttributeValue</span><span class="o">(</span><span class="n">nestedId</span><span class="o">),</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">AttributeValue</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simple</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>   <span class="o">).</span><span class="n">asJava</span><span class="o">)</span>
</span><span class='line'><span class="o">).</span><span class="n">asJava</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I&rsquo;m sure you can imagine how tiresome writing this type of code became. We wrote a macro to generate this boilerplate for us.</p>

<h2>Don&rsquo;t Write Macros</h2>

<blockquote><p>The first rule of macro club is don&rsquo;t write macros</p></blockquote>

<p>Macros are confusing. Using a macro means you write your code, the macro rewrites it, and then we execute the code without really knowing what the code now looks like. Macros can make code more complicated, and should be avoided in most situations.</p>

<blockquote><p>The second rule of macro club is to write the simplest macro possible.</p></blockquote>

<p>I made this one up, but I like it. If you <em>have</em> to write a macro, write one so simple that anyone can understand how it works. Write one that is so simple that it can be explained in a blog post!</p>

<h2>An Intermediate Representation</h2>

<p>Following the second rule of macro club, we defined some simple functions and typeclasses that simplified the macro. This also had the advantage of yielding more control than a macro did.</p>

<p>For instance, we wanted better control over the AttributeValue key names, so we defined <code>DynamoWrites</code> and <code>DynamoReads</code>. As we use Play Framework a lot, they were heavily influenced by Play JSON Writes and Reads. <code>DynamoReadResult</code> was inspired by Play JSON&rsquo;s <code>JsResult</code>. The only difference is that this <code>DynamoReads</code> code fails fast rather than using an applicative to collect all the errors.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">User</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">email</span><span class="k">:</span> <span class="kt">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">writeFormat</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DynamoWrites</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">u</span><span class="k">:</span> <span class="kt">User</span><span class="o">)</span><span class="k">:</span> <span class="kt">DynamoValue</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">map</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">id</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">email</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">email</span><span class="o">)</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">readFormat</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DynamoReads</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">d</span><span class="k">:</span> <span class="kt">DynamoValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">DynamoReadResult</span><span class="o">[</span><span class="kt">User</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">id</span>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">d</span><span class="o">.</span><span class="n">attr</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;id&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="n">name</span>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">d</span><span class="o">.</span><span class="n">attr</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;name&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="n">email</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">d</span><span class="o">.</span><span class="n">attr</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;email&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">yield</span> <span class="nc">User</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>With these defined, writing the macros was simpler, and we have a nicer representation than the Java SDK to fallback to if the macro doesn&rsquo;t quite meet our needs.</p>

<h2>Macros Explained!</h2>

<p>Below is a macro. It generates a <code>DynamoWrites</code> implementation for a case class:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">formatWriteImpl</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;c:%20whitebox.Context&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="k">:</span> <span class="kt">c.WeakTypeTag&lt;/a</span><span class="k">&gt;:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">DynamoWrites</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">c.universe._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">tpe</span> <span class="k">=</span> <span class="n">weakTypeOf</span><span class="o">[</span><span class="kt">T</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">fields</span> <span class="k">=</span> <span class="n">tpe</span><span class="o">.</span><span class="n">decls</span><span class="o">.</span><span class="n">collectFirst</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">MethodSymbol</span> <span class="kt">if</span> <span class="kt">m.isPrimaryConstructor</span> <span class="o">=&gt;</span> <span class="n">m</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">get</span><span class="o">.</span><span class="n">paramLists</span><span class="o">.</span><span class="n">head</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">toMapParams</span> <span class="k">=</span> <span class="n">fields</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">field</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="n">field</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">toTermName</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">decoded</span> <span class="k">=</span> <span class="n">name</span><span class="o">.</span><span class="n">decodedName</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>    <span class="n">q</span><span class="s">&quot;($decoded -&gt; o.$name)&amp;ldquo;</span>
</span><span class='line'><span class="s">  }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;  c.Expr[DynamoWrites[T]] { q&quot;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span><span class='line'>    <span class="k">new</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">root</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;.</span><span class="n">com</span><span class="o">.</span><span class="n">netaporter</span><span class="o">.</span><span class="n">dynamomapper</span><span class="o">.</span><span class="nc">DynamoWrites</span><span class="o">[</span><span class="kt">$tpe</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">o</span><span class="k">:</span> <span class="kt">$tpe</span><span class="o">)</span> <span class="k">=</span> <span class="n">map</span><span class="o">(..</span><span class="nc">$toMapParams</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It doesn&rsquo;t look simple though! Let&rsquo;s break it down. Scala macros contain <strong>a lot</strong> of boilerplate. However, this is boilerplate that we only had to write once, rather than every time we wanted to convert a case class.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">formatWriteImpl</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;c:%20whitebox.Context&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="k">:</span> <span class="kt">c.WeakTypeTag&lt;/a</span><span class="k">&gt;:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">DynamoWrites</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The first line (above) is the type signature. Crucially, it finishes with <code>c.Expr[DynamoWrites[T]]</code>. This means we return an <code>Expression</code> of <code>DynamoWrites[T]</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">tpe</span> <span class="k">=</span> <span class="n">weakTypeOf</span><span class="o">[</span><span class="kt">T</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">fields</span> <span class="k">=</span> <span class="n">tpe</span><span class="o">.</span><span class="n">decls</span><span class="o">.</span><span class="n">collectFirst</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">MethodSymbol</span> <span class="kt">if</span> <span class="kt">m.isPrimaryConstructor</span> <span class="o">=&gt;</span> <span class="n">m</span>
</span><span class='line'><span class="o">}.</span><span class="n">get</span><span class="o">.</span><span class="n">paramLists</span><span class="o">.</span><span class="n">head</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Next, we have some typelevel programming. <code>tpe</code> enabled us to query the type of <code>T</code>. Types expose declarations (or <code>decls</code>), such as their constructors, methods, variables etc. This code finds the constructor, and gets the fields we need to provide in order to instantiate an instance of the case class. For the <code>DynamoWrites</code>, we need to know what the type is expecting in order to write it.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">toMapParams</span> <span class="k">=</span> <span class="n">fields</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">field</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="n">field</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">toTermName</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">decoded</span> <span class="k">=</span> <span class="n">name</span><span class="o">.</span><span class="n">decodedName</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>  <span class="n">q</span><span class="err">&quot;</span><span class="o">(</span><span class="nc">$decoded</span> <span class="o">-&gt;</span> <span class="n">o</span><span class="o">.</span><span class="nc">$name</span><span class="o">)&amp;</span><span class="n">ldquo</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>toMapParams</code> maps over the fields and returns a map of names to values contained in an a type. <code>decoded</code> is the string name of the field, and <code>o.$name</code> invokes the that field on an object <code>o</code>. This object is provided by the implementation of the <code>DynamoWrites</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">c</span><span class="o">.</span><span class="nc">Expr</span><span class="o">[</span><span class="kt">DynamoWrites</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span> <span class="o">{</span> <span class="n">q</span><span class="err">&quot;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span><span class='line'>  <span class="k">new</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">root</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;.</span><span class="n">com</span><span class="o">.</span><span class="n">netaporter</span><span class="o">.</span><span class="n">dynamomapper</span><span class="o">.</span><span class="nc">DynamoWrites</span><span class="o">[</span><span class="kt">$tpe</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">writes</span><span class="o">(</span><span class="n">o</span><span class="k">:</span> <span class="kt">$tpe</span><span class="o">)</span> <span class="k">=</span> <span class="n">map</span><span class="o">(..</span><span class="nc">$toMapParams</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is where the magic happens. We use quasiquotes to create our <code>DynamoWrites[T]</code>, and specify that <code>o</code> is type <code>T</code>. Quasiquotes are essentially string interpolation, with <a href="http://docs.scala-lang.org/overviews/quasiquotes/expression-details.html">various notations</a>. We inserted our previously constructed field-map using the <code>..$</code> notation. The double-dots denote that we passed a list.</p>

<h2>Macros Again!</h2>

<p>We still needed a macro for <code>DynamoReads</code>. Luckily, it is almost the same as before. Copy paste, with a few alterations.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.language.higherKinds</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.reflect.macros._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.language.experimental.macros</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">formatReadImpl</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;c:%20whitebox.Context&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="k">:</span> <span class="kt">c.WeakTypeTag&lt;/a</span><span class="k">&gt;:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">DynamoReads</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">c.universe._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">tpe</span> <span class="k">=</span> <span class="n">weakTypeOf</span><span class="o">[</span><span class="kt">T</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">fields</span> <span class="k">=</span> <span class="n">tpe</span><span class="o">.</span><span class="n">decls</span><span class="o">.</span><span class="n">collectFirst</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">MethodSymbol</span> <span class="kt">if</span> <span class="kt">m.isPrimaryConstructor</span> <span class="o">=&gt;</span> <span class="n">m</span>
</span><span class='line'>  <span class="o">}.</span><span class="n">get</span><span class="o">.</span><span class="n">paramLists</span><span class="o">.</span><span class="n">head</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">companionObj</span> <span class="k">=</span> <span class="n">tpe</span><span class="o">.</span><span class="n">typeSymbol</span><span class="o">.</span><span class="n">companion</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="o">(</span><span class="n">names</span><span class="o">,</span> <span class="n">fromMapParams</span><span class="o">)</span> <span class="k">=</span> <span class="n">fields</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">field</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">name</span> <span class="k">=</span> <span class="n">field</span><span class="o">.</span><span class="n">asTerm</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">decoded</span> <span class="k">=</span> <span class="n">name</span><span class="o">.</span><span class="n">decodedName</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">returnType</span> <span class="k">=</span> <span class="n">tpe</span><span class="o">.</span><span class="n">decl</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="n">typeSignature</span>
</span><span class='line'>    <span class="o">(</span><span class="n">q</span><span class="s">&quot;$name&quot;</span><span class="o">,</span> <span class="n">fq</span><span class="s">&quot;&amp;ldquo;&amp;rdquo;$name &amp;lt;- o.attr&lt;a href=&quot;</span><span class="nc">$decoded</span><span class="s">&quot;&gt;$returnType&lt;/a&gt;&amp;ldquo;&amp;rdquo;&amp;ldquo;)</span>
</span><span class='line'><span class="s">  }.unzip&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;  c.Expr[DynamoReads[T]] { q&quot;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span><span class='line'>    <span class="k">new</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">root</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;.</span><span class="n">com</span><span class="o">.</span><span class="n">netaporter</span><span class="o">.</span><span class="n">dynamomapper</span><span class="o">.</span><span class="nc">DynamoReads</span><span class="o">[</span><span class="kt">$tpe</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">o</span><span class="k">:</span> <span class="kt">&lt;em&gt;root&lt;/em&gt;.com.netaporter.dynamomapper.DynamoValue</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>       <span class="k">for</span> <span class="o">(..</span><span class="nc">$fromMapParams</span><span class="o">)</span> <span class="k">yield</span> <span class="nc">$companionObj</span><span class="o">(..</span><span class="nc">$names</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There are some differences here. We found the companion object for a case class on Line#14 in order to use the <code>apply</code> method. We also used <code>fq</code> when constructing our fields list, as <code>fq</code> is the interpolator for for-loops.</p>

<h2>Summary</h2>

<p>Scala Macros have a reputation for being difficult. They&rsquo;re not. They&rsquo;re just undocumented, and incredibly inconsistent compared to normal Scala code. However, you can use them to provide a nicer experience for developers.</p>

<p>This code has been used successfully in production for over a year now, and is <a href="https://github.com/net-a-porter/dynamo-mapper">available on Github</a> as a library. Please note the warnings on the README, as only some Scala types are supported, and only some DynamoDB types are supported. We didn&rsquo;t have a use-case to implement them all.</p>

<p>Would we write this macro-code again, a year later? Maybe, but maybe not. <a href="https://skillsmatter.com/skillscasts/9294-london-scala-meetup">Chris Birchall did a recent talk on Scala Macros, and Shapeless</a> at the London Scala User&rsquo;s Group, where he argued that anything done with a macro could be done with Shapeless for less effort. Make sure you check out that talk before attempting anything with macros. I also heard very good things about <a href="https://github.com/guardian/scanamo/">the Guardian&rsquo;s Scanamo library</a> at this year&rsquo;s Scala Exchange conference, and it sounds like that would have fulfilled our requirements for a DynamoDB library, had it been published earlier!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cassandra TTL Is Per Column]]></title>
    <link href="http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column/"/>
    <updated>2015-03-02T11:30:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column</id>
    <content type="html"><![CDATA[<p><a href="http://cassandra.apache.org/">Cassandra</a> Time-To-Live (TTL) is decribed in the <a href="http://www.datastax.com/documentation/cql/3.0/cql/cql_using/use_ttl_t.html">Datastax documentation</a>. This blog post briefly explores it to demonstrate that TTL is set per column, and not per row.</p>

<p>We start by recreating the example given in the documentation. We create a keyspace, a table, and insert some data into it. The TTL value is much lower than the offical documentation, as I don&rsquo;t want to wait 24 hours before the TTL runs out.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> CREATE KEYSPACE excelsior WITH REPLICATION =
</span><span class='line'>         { &lsquo;class&rsquo; : &lsquo;SimpleStrategy&rsquo;, &lsquo;replication_factor&rsquo;: 1 }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cqlsh> CREATE TABLE excelsior.clicks (
</span><span class='line'>         userid uuid,
</span><span class='line'>         url text,
</span><span class='line'>         date timestamp,
</span><span class='line'>         name text,
</span><span class='line'>         PRIMARY KEY (userid, url)
</span><span class='line'>       );&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, date, name)
</span><span class='line'>       VALUES (
</span><span class='line'>         3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>         &lsquo;&lt;a href="http://apache.org">http://apache.org&lt;/a>&rsquo;,
</span><span class='line'>         &lsquo;2013-10-09&rsquo;, &lsquo;Mary&rsquo;)
</span><span class='line'>       USING TTL 60;</span></code></pre></td></tr></table></div></figure></p>

<p>Now that we have created our keyspace and table, let&rsquo;s query the TTL:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2> ttl(date) | ttl(name)&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    52 |        52
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>Insert or Update to change TTL per column</h2>

<p>As demonstrated by the CQL synatx, TTL is set per column. To demonstrate this, we now insert the data again, but exclude the date.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, name)
</span><span class='line'>         VALUES (
</span><span class='line'>           3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>           &lsquo;&lt;a href="http://apache.org">http://apache.org&lt;/a>&rsquo;,
</span><span class='line'>           &lsquo;Mary&rsquo;)
</span><span class='line'>         USING TTL 60;
</span><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> ttl(date) | ttl(name)
</span><span class='line'>&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;
</span><span class='line'>        11 |        49</span></code></pre></td></tr></table></div></figure></p>

<p>If we then wait 11 seconds, we can see that different columns can expire at different times.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> select * from excelsior.clicks;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> userid                               | url               | date | name
</span><span class='line'>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&mdash;
</span><span class='line'> 3715e600-2eb0-11e2-81c1-0800200c9a66 | &lt;a href="http://apache.org">http://apache.org&lt;/a> | null | Mary</span></code></pre></td></tr></table></div></figure></p>

<p>This can come as a surprise if you&rsquo;re used to rows behaving as one single entity. If you want to update the TTL for an entire row in Cassandra, you need to either insert or update the entire row again with a new TTL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MongoDB TTL Collections to Manage User Registrations]]></title>
    <link href="http://cjwebb.github.io/blog/2012/12/17/mongodb-ttl-collections/"/>
    <updated>2012-12-17T11:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2012/12/17/mongodb-ttl-collections</id>
    <content type="html"><![CDATA[<p><a href="https://docs.mongodb.com/manual/tutorial/expire-data/">TTL Collections</a> were introduced in MongoDB 2.2. You are now able to create an index which triggers the deletion of a document after the TTL time passes.</p>

<p>One such use of TTL collections is temporarily storing user sign-ups. A common solution for a website to verify a user’s email address is to send the user a link to click on to activate their account. TTL collections can be used to remove users who never activate their account. This was the solution I used when implementing a web app.</p>

<p>Suppose we have If we have two collections inside MongoDB: user_invites, users. We then follow this flow:</p>

<ul>
<li>User fills in web-form with their invite code.</li>
<li>Upon submission, a UUID is generated.</li>
<li>We create a new document in user_invites, with all their details and the UUID:</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;_id&rdquo; : ObjectId(“505a1614001b9c1a9cb10803"),
</span><span class='line'>  &ldquo;password&rdquo; : &ldquo;$2a$12$vCew7zzXqtyRGKQV4xfSZ.KbmmCRMx.pVJD6DesTLrOvuUghB5Oeu&rdquo;,
</span><span class='line'>  &ldquo;expiry_time&rdquo; : ISODate(“2012-10-21T18:59:31.753Z"),
</span><span class='line'>  &ldquo;invite_code&rdquo; : &ldquo;an-invite-code&rdquo;,
</span><span class='line'>  &ldquo;activation_code&rdquo; : &ldquo;cbcff14&rdquo;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>We send the user an email to the email address they specified, with a URL to click on. This URL contains the UUID.</li>
<li>When the link is clicked on, we look up the user by the UUID and move all the information into the users collections.</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;_id&rdquo; : ObjectId(&ldquo;504ae6e2001b9c0548ab0b64&rdquo;),
</span><span class='line'>  &ldquo;password&rdquo; : &ldquo;$2a$12$vCew7zzXqtyRGKQV4xfSZ.KbmmCRMx.pVJD6DesTLrOvuUghB5Oeu&rdquo;,
</span><span class='line'>  &ldquo;email&rdquo; : &ldquo;&lt;a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#110;&#95;&#x65;&#x6d;&#97;&#105;&#108;&#x40;&#97;&#x64;&#x64;&#114;&#x65;&#115;&#115;&#46;&#99;&#111;&#x6d;">&#97;&#110;&#95;&#101;&#x6d;&#x61;&#x69;&#108;&#64;&#97;&#x64;&#100;&#114;&#101;&#x73;&#x73;&#46;&#99;&#x6f;&#x6d;&lt;/a>&rdquo;,
</span><span class='line'>  &ldquo;created_date&rdquo; : ISODate(“2012-09-18T18:59:31.753Z")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>If the URL is never clicked on, a background MongoDb process deletes the user_invite document after the time specified in the TTL index.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;v&rdquo; : 1,
</span><span class='line'>  &ldquo;key&rdquo; : { &ldquo;expiry_time&rdquo; : 1 },
</span><span class='line'>  &ldquo;ns&rdquo; : &ldquo;colin.user_invites&rdquo;,
</span><span class='line'>  &ldquo;name&rdquo; : &ldquo;expiry_time_1&rdquo;,
</span><span class='line'>  &ldquo;expireAfterSeconds&rdquo; : 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>Using this method, we can be sure that our users have a valid email address, and that they’ve actually visited the site.</p>
]]></content>
  </entry>
  
</feed>
