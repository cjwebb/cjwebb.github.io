<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cjwebb.github.io]]></title>
  <link href="http://cjwebb.github.io/atom.xml" rel="self"/>
  <link href="http://cjwebb.github.io/"/>
  <updated>2016-12-16T20:12:08+00:00</updated>
  <id>http://cjwebb.github.io/</id>
  <author>
    <name><![CDATA[Colin Webb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with Haskell's Warp]]></title>
    <link href="http://cjwebb.github.io/blog/2016/12/16/getting-started-with-haskells-warp/"/>
    <updated>2016-12-16T21:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2016/12/16/getting-started-with-haskells-warp</id>
    <content type="html"><![CDATA[<p>I recently started playing with Haskell&rsquo;s <a href="http://www.aosabook.org/en/posa/warp.html">Warp</a> in my effort to learn Haskell. Warp is small and fast web server, and doesn&rsquo;t come bundled with much. It also has no &ldquo;magic&rdquo; in it, which I think is a very good thing.</p>

<p>My hello-world program for any web server, is to respond with <code>{"hello":"world"}</code>. Here it is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE OverloadedStrings #-}</span>
</span><span class='line'><span class="cm">{-# LANGUAGE DeriveGeneric, DeriveAnyClass #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.Wai</span> <span class="p">(</span><span class="nf">responseLBS</span><span class="p">,</span> <span class="kt">Application</span><span class="p">,</span> <span class="kt">Response</span><span class="p">,</span> <span class="nf">rawPathInfo</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.Wai.Handler.Warp</span> <span class="p">(</span><span class="nf">run</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.HTTP.Types</span> <span class="p">(</span><span class="nf">status200</span><span class="p">,</span> <span class="nf">status404</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.HTTP.Types.Header</span> <span class="p">(</span><span class="nf">hContentType</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Aeson</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">GHC.Generics</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Hello</span> <span class="ow">=</span> <span class="kt">Hello</span> <span class="p">{</span> <span class="n">hello</span> <span class="ow">::</span> <span class="kt">String</span> <span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Generic</span><span class="p">,</span> <span class="kt">ToJSON</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">port</span> <span class="ow">=</span> <span class="mi">3000</span>
</span><span class='line'>  <span class="n">putStrLn</span> <span class="o">$</span> <span class="s">&quot;Listening on port &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">port</span>
</span><span class='line'>  <span class="n">run</span> <span class="n">port</span> <span class="n">app</span>
</span><span class='line'>
</span><span class='line'><span class="nf">app</span> <span class="ow">::</span> <span class="kt">Application</span>
</span><span class='line'><span class="nf">app</span> <span class="n">req</span> <span class="n">res</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">$</span> <span class="kr">case</span> <span class="n">rawPathInfo</span> <span class="n">req</span> <span class="kr">of</span>
</span><span class='line'>    <span class="s">&quot;/&quot;</span> <span class="ow">-&gt;</span> <span class="n">helloRoute</span>
</span><span class='line'>    <span class="kr">_</span>   <span class="ow">-&gt;</span> <span class="n">notFoundRoute</span>
</span><span class='line'>
</span><span class='line'><span class="nf">helloRoute</span> <span class="ow">::</span> <span class="kt">Response</span>
</span><span class='line'><span class="nf">helloRoute</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">responseLBS</span>
</span><span class='line'>  <span class="n">status200</span>
</span><span class='line'>  <span class="p">[(</span><span class="n">hContentType</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="o">.</span> <span class="n">encode</span> <span class="o">$</span> <span class="kt">Hello</span> <span class="s">&quot;World&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">notFoundRoute</span> <span class="ow">::</span> <span class="kt">Response</span>
</span><span class='line'><span class="nf">notFoundRoute</span> <span class="ow">=</span>
</span><span class='line'>  <span class="n">responseLBS</span>
</span><span class='line'>  <span class="n">status404</span>
</span><span class='line'>  <span class="p">[(</span><span class="n">hContentType</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="s">&quot;404 - Not Found&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the code has a <code>main</code> function that runs the <code>app</code>. This <code>app</code> just matches on routes, and responds with <code>HTTP 200 OK</code> on the root, or <code>HTTP 404 Not Found</code>. These are returned by different functions which returning <code>Response</code> types, and contain most of the hard parts of this code.</p>

<p>Talking of hard parts, the thing I had the most difficultly with was:</p>

<h3>Working out what <code>responseLBS</code> meant, and how to use it</h3>

<p><code>responseLBS</code> means &ldquo;respond with a LazyByteString&rdquo;. LazyByteString seems to be the standard way of dealing with Strings in Warp. Their laziness, and serialisation format, apparently yields very high performance.</p>

<p>However, using them is not so simple. Unless you convert from a normal String to a LazyByteString, you receive this compiler error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Couldn't match expected type
</span><span class='line'>‘bytestring-0.10.8.1:Data.ByteString.Internal.ByteString’
</span><span class='line'>with actual type ‘[Char]’</span></code></pre></td></tr></table></div></figure>


<p>The <code>OverloadedStrings</code> pragma on the first line makes responseLBS usable, but providing a typeclass that automatically converts Strings to LazyByteStrings. It took me a while to realise this.</p>

<h2>Summary</h2>

<p>One of the best things about this code was the experience writing it. Once it compiled, it worked. It took a while to work out, but it was all helpfully guided by the compiler.</p>

<p>I think I&rsquo;d probably benefit from an IDE for Haskell, as I spend much of my time in IntelliJ coding Scala. Discovering the necessary imports was the trickiest part of coding in the Atom Editor. If you have any recommendations, please send them my way!</p>

<p>IDE&rsquo;s aside, if coding in Haskell is always this pleasant, I&rsquo;ll be very pleased!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Akka Streams]]></title>
    <link href="http://cjwebb.github.io/blog/2016/06/28/learning-akka-streams/"/>
    <updated>2016-06-28T11:00:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2016/06/28/learning-akka-streams</id>
    <content type="html"><![CDATA[<p>This blog post differs from my usual ones; I&rsquo;m writing it as I learn something. As such, it is more of a story that contains errors and misunderstanding than a factual blog post.</p>

<h2>Hello World</h2>

<p>This blog post follows me trying to learn how to use <a href="http://doc.akka.io/docs/akka/2.4.7/scala/stream/stream-introduction.html">Akka Streams</a>. I haven&rsquo;t needed to use them before, and whenever I glance at the documentation, I usually get confused about just how many new terms are being introduced.</p>

<p>Runnable code is available <a href="https://github.com/cjwebb/blog-code/tree/master/learning-akka-streams">here</a>. I&rsquo;ve included more type annotations that normal, as they will assist us discussing what is going on.</p>

<p>We start by compiling and running the &lsquo;Hello World&rsquo; example in <a href="http://doc.akka.io/docs/akka/2.4.7/scala/stream/stream-quickstart.html#stream-quickstart-scala">the Quick Start Guide</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.NotUsed</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">HelloWorld</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">source</span><span class="o">.</span><span class="n">runForeach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Source</code> will be widely used. It represents the inputs to the stream.</p>

<p>A couple of things stand out in the code. Firstly, the <code>ActorMaterializer</code> is new, compared to standard Akka. I have no idea what it does, but I&rsquo;m guessing it could have been named &ldquo;ActorFactory&rdquo;.</p>

<p>Secondly, the <code>Source</code> takes two type parameters. The first is the type that the <code>Source</code> emits. The documentations says that &ldquo;the second one may signal that running the source produces some auxiliary value (e.g. a network source may provide information about the bound port or the peer’s address)&rdquo;. The first one makes sense. The second one doesn&rsquo;t yet. Things will hopefully become clearer once I write something else.</p>

<p>Either way, this stream runs and prints out 1 to 100.</p>

<h2>Using a Sink</h2>

<blockquote><p>Source &ndash;> Sink</p></blockquote>

<p>The first example uses a <code>Source</code>. It is not really a Stream. We just send everything to <code>stdout</code>. Let&rsquo;s use <code>Sink</code>, which are the outputs of a stream.</p>

<p>There seem to be lots of kinds of <code>Sink</code>, including a <code>foreach</code> one, which we can use to <code>println</code> again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.</span><span class="o">{</span><span class="nc">Done</span><span class="o">,</span> <span class="nc">NotUsed</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.Future</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">UsingASink</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Any</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Done</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">source</span><span class="o">.</span><span class="n">runWith</span><span class="o">(</span><span class="n">sink</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, the type signature of this is <code>Sink[Any, Future[Done]]</code>. From reading the ScalaDoc, <code>Done</code> is essentially <code>Unit</code>, but they used included it so the code could also run on Java. We&rsquo;ve also used that second mysterious type parameter.</p>

<p>ScalaDoc says &ldquo;The sink is materialized into a [[scala.concurrent.Future]]&rdquo;. Perhaps the ActorMaterializer has been used, and deals with side-effects? Let&rsquo;s keep going, and see if a more complicated example makes it easier to understand.</p>

<h1>Simple Transform</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Source --> Flow --> Sink</span></code></pre></td></tr></table></div></figure>


<p>So far, we generate a Stream from an <code>Iterable</code>, send it to a <code>Sink</code>, and then print it out. Let&rsquo;s include an intermediate step, where we do some &ldquo;stream processing&rdquo;. For this, we need the <code>Flow</code> class. This is beginning to look more like the Stream I imagined.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.</span><span class="o">{</span><span class="nc">Done</span><span class="o">,</span> <span class="nc">NotUsed</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.Future</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">SimpleTransform</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Any</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Done</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">helloTimesTen</span><span class="k">:</span> <span class="kt">Flow</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Flow</span><span class="o">[</span><span class="kt">Int</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="s">&quot;Hello ${i * 10}&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph</span><span class="k">:</span> <span class="kt">RunnableGraph</span><span class="o">[</span><span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="n">source</span> <span class="n">via</span> <span class="n">helloTimesTen</span> <span class="n">to</span> <span class="n">sink</span>
</span><span class='line'>  <span class="n">graph</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We discovered another type now; <code>RunnableGraph</code>. This is a &ldquo;Flow with attached input and output, can be executed.&rdquo;</p>

<p>That makes sense. We&rsquo;ve attached a <code>Source</code>, and a <code>Sink</code>, to our <code>Flow</code>. Therefore it has input and output, and should work.</p>

<p>RunnableGraph also specifies that it has a <code>ClosedShape</code>, which also hints at the role that a <code>Materializer</code> takes. I&rsquo;m still yet to figure them out.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * This [[Shape]] is used for graphs that have neither open inputs nor open</span>
</span><span class='line'><span class="cm"> * outputs. Only such a [[Graph]] can be materialized by a [[Materializer]].</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ClosedShape</span> <span class="k">extends</span> <span class="nc">Shape</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Graphs</h2>

<p>All of our examples so far have been very linear. There has been no way of splitting the stream to do different pieces of work, or combine multiple sources.</p>

<p>One use-case I can think of when using Akka Streams is to persist events on the stream to a database, in addition to continuing the stream processing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Source --> Broadcast --> Flow --> Sink
</span><span class='line'>               |
</span><span class='line'>               --> Save to DB</span></code></pre></td></tr></table></div></figure>


<p>Akka Streams has a thing named <code>Broadcast</code> especially for this. However, constructing and using one is more complex than I imaged. You need to start using a mutable <code>GraphDSL.Builder</code>. The GraphDSL implies that we now need to learn what lots of funny symbols mean, such as <code>~&gt;</code>.</p>

<p>We need to build up a <code>Graph[ClosedShape, Mat]</code> where <code>Mat</code> is one of those Materializers that I still don&rsquo;t understand.</p>

<p>Interesting, it seems as though <code>Graph</code> doesn&rsquo;t type-check very well. It is possible to construct and run a Graph that doesn&rsquo;t do anything except fail at runtime. The following code gets checked via a <code>require</code> assertion when running the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">isRunnable</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">inPorts</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">&amp;&amp;</span> <span class="n">outPorts</span><span class="o">.</span><span class="n">isEmpty</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not really sure how one would go about asserting this at compile-time. It definitely seems possible though, as other Scala libraries have similar builder patterns that type-check. Hopefully this will be addressed in a future release.</p>

<p>Anyway, lets try and build a Stream that saves events to a DB.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.</span><span class="o">{</span><span class="nc">Done</span><span class="o">,</span> <span class="nc">NotUsed</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">ExecutionContext</span><span class="o">,</span> <span class="nc">Future</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">SendToDB</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">intSource</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">helloTimesTen</span><span class="k">:</span> <span class="kt">Flow</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Flow</span><span class="o">[</span><span class="kt">Int</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="s">&quot;Hello ${i * 10}&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">intToEvent</span><span class="k">:</span> <span class="kt">Flow</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">DB.Event</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Flow</span><span class="o">[</span><span class="kt">Int</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="nc">DB</span><span class="o">.</span><span class="nc">Event</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Event $i&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">printlnSink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Any</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Done</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">dbSink</span> <span class="k">=</span> <span class="nc">Flow</span><span class="o">[</span><span class="kt">DB.Event</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="nc">DB</span><span class="o">.</span><span class="n">persistEvent</span><span class="o">).</span><span class="n">toMat</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">right</span><span class="o">).</span><span class="n">named</span><span class="o">(</span><span class="s">&quot;dbSink&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph</span> <span class="k">=</span> <span class="nc">RunnableGraph</span><span class="o">.</span><span class="n">fromGraph</span><span class="o">(</span><span class="nc">GraphDSL</span><span class="o">.</span><span class="n">create</span><span class="o">()</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">builder</span><span class="k">:</span> <span class="kt">GraphDSL.Builder</span><span class="o">[</span><span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">GraphDSL.Implicits._</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">broadcast</span> <span class="k">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">Broadcast</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="mi">2</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intSource</span> <span class="o">~&gt;</span> <span class="n">broadcast</span> <span class="o">~&gt;</span> <span class="n">helloTimesTen</span> <span class="o">~&gt;</span> <span class="n">printlnSink</span>
</span><span class='line'>                 <span class="n">broadcast</span> <span class="o">~&gt;</span> <span class="n">intToEvent</span> <span class="o">~&gt;</span> <span class="n">dbSink</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">ClosedShape</span>
</span><span class='line'>  <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">graph</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">DB</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">Event</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">persistEvent</span><span class="o">(</span><span class="n">e</span><span class="k">:</span> <span class="kt">Event</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// pretend that some DB IO happens here</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;persisting $e&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nc">Future</span> <span class="o">{}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a lot of new stuff here. Starting with the easiest thing; I&rsquo;ve renamed some vals to reflect what they do now. We also have a new <code>Flow</code> named <code>intToEvent</code> which maps an <code>Int</code> to a <code>DB.Event</code> case class.</p>

<p>We also have the <code>GraphDSL</code> syntax, and implicit conversions. <code>~&gt;</code> means &ldquo;Add Edge to Graph&rdquo; in my head. As DSLs go, it isn&rsquo;t too bad. Arrows are Stream processing go hand-in-hand. I&rsquo;ll try and use this syntax from now on.
The <code>Broadcast</code> class also checks at compile time that we&rsquo;ve linked all the specified &lsquo;ports&rsquo;. In our example, we create the <code>Broadcast</code> and say it will have two things listening to it. If we only connect, one, we get a runtime error.</p>

<p>Lastly, we have a new <code>Sink</code> named <code>dbSink</code>. I basically copied the code from inside the <code>printlnSink</code> and changed the <code>map</code> method. It seems as though in order to perform actions on a Stream, we need to materialize the values contained inside. I now assume that Streams are inherently lazy, and Materializing is the act of evaluating the Stream.</p>

<p>We need to dig into Materializers, and finally figure them out.</p>

<h2>Basic Materializer</h2>

<p>Having read the docs some more, it seems as though &ldquo;materialization&rdquo; is the thing that actually runs our Stream. When using Akka, actors are created (or materialized) in order to do the work. Makes sense. I can&rsquo;t help but feel that this should have been more obvious at the start&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Source ~> Sink</span></code></pre></td></tr></table></div></figure>


<p>We return to the simplest graph, with just a Source and a Sink. The Source generates Ints, and the Sink just takes the first one.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.NotUsed</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.duration.Duration</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">Await</span><span class="o">,</span> <span class="nc">Future</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">BasicMaterializer</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">intSource</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">NotUsed</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">headSink</span><span class="k">:</span> <span class="kt">Sink</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Sink</span><span class="o">.</span><span class="n">head</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph1</span><span class="k">:</span> <span class="kt">RunnableGraph</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="n">intSource</span><span class="o">.</span><span class="n">toMat</span><span class="o">(</span><span class="n">headSink</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">right</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph2</span><span class="k">:</span> <span class="kt">RunnableGraph</span><span class="o">[</span><span class="kt">NotUsed</span><span class="o">]</span>     <span class="k">=</span> <span class="n">intSource</span><span class="o">.</span><span class="n">toMat</span><span class="o">(</span><span class="n">headSink</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">left</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// we can only get values from graph1</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">graph1</span><span class="o">.</span><span class="n">run</span><span class="o">(),</span> <span class="nc">Duration</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="s">&quot;seconds&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">system</span><span class="o">.</span><span class="n">terminate</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve included code of two RunnableGraphs. They only vary in second arguments; <code>Keep.right</code> versus <code>Keep.left</code>. This seems to be the key to Materializers, and the mysterious second type parameter included everywhere in our Source, Flows, and Sinks.</p>

<p>In order to get any values out of a Stream flowing left to right, we need to keep the right values. Presumably, in a stream going the other way, we need to keep the left values. In our case, the right side of our graph has <code>Future[Int]</code> as the second type parameter. This is the one we need.</p>

<p>The types on these methods are very obvious; given two types select the one on the left, or the right.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">left</span> <span class="o">[</span><span class="kt">L</span>, <span class="kt">R</span><span class="o">]</span><span class="k">:</span> <span class="o">(</span><span class="kt">L</span><span class="o">,</span> <span class="kt">R</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">L</span>
</span><span class='line'><span class="k">def</span> <span class="n">right</span><span class="o">[</span><span class="kt">L</span>, <span class="kt">R</span><span class="o">]</span><span class="k">:</span> <span class="o">(</span><span class="kt">L</span><span class="o">,</span> <span class="kt">R</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">R</span>
</span></code></pre></td></tr></table></div></figure>


<p>This now also answers my questions above about the previously used <code>Sink</code> named <code>dbSink</code>. Here&rsquo;s the implementation again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Flow</span><span class="o">[</span><span class="kt">DB.Event</span><span class="o">].</span><span class="n">map</span><span class="o">(</span><span class="nc">DB</span><span class="o">.</span><span class="n">persistEvent</span><span class="o">).</span><span class="n">toMat</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)(</span><span class="nc">Keep</span><span class="o">.</span><span class="n">right</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>DB.persistEvent</code> returns a <code>Future[Unit]</code>. In order to actually evalutate these Futures, we need to materialize the stream. As we&rsquo;re Keeping right, we pass our futures into <code>Sink.ignore</code>. If we kept left, we pass <code>NotUsed</code>. Whilst ignoring them doesn&rsquo;t sound very useful, this actually runs them before ignoring whatever they return.</p>

<p>I feel like I understand roughly how Akka Streams work now.</p>

<p>Here&rsquo;s a recap.</p>

<ul>
<li>Sources generate values.</li>
<li>Sinks consume values.</li>
<li>Materialization is the process of running the Stream, and getting your Sink to do something.</li>
<li>Flows are linear transformations.</li>
<li>Graphs can be modelled with Broadcast (and Merge, but we didn&rsquo;t try them out).</li>
</ul>


<p>This is enough blog post for now. I&rsquo;d like to continue learning Akka Streams; they seem a lot easier to use than Actors, and patterns are built in. Streams are more type-safe than Actors too, which hopefully will permit writing more maintainable code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Virtues of Side Projects]]></title>
    <link href="http://cjwebb.github.io/blog/2016/06/15/the-virtues-of-side-projects/"/>
    <updated>2016-06-15T11:00:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2016/06/15/the-virtues-of-side-projects</id>
    <content type="html"><![CDATA[<p>I write software for a living, and most of my side projects are software based too. I view side projects as a tool for learning. Learning by doing.</p>

<h2>Side projects can feed positively into your day job, as you learn new skills and techniques</h2>

<p>Building things from scratch, and by yourself, means you have to broaden your knowledge base. If you&rsquo;re writing a website, you&rsquo;ll need to know how to deploy it, how to enable database backups, how to configure a firewall, and basic server maintenance tools.</p>

<p>When I first started a side project, I wrote Java all day, and developed on Windows. I knew hardly anything about Linux, and certainly had no experience running a server. Whilst it wasn&rsquo;t necessarily all fun, I learnt a lot that has been widely applicable later on in my career.</p>

<p>Side projects can also assist in your day job directly. An example of this very happened recently to me. A couple of colleagues were pair programming on an adjacent desk. They were stuck on something, and casually asked if I knew how to fix a problem they were having. After a minute or so looking at the code, my answer was “Yeah, I did something like this recently in my side project”. I then sent them a link to my side project on Github, and after adapting my code, they had solved their issue and were away coding again.</p>

<p>Usually it&rsquo;s skills and techniques that will transfer over from side-projects. Occasionally, you can just copy some of your side project code.</p>

<h2>Side projects let you experiment without adversely affecting your day-job</h2>

<p>Want to learn Haskell? Great! But don&rsquo;t then deploy it at work, and <strong>force</strong> other people to maintain your code.</p>

<p>Want to try out a theory about structuring an object-orientated codebase? You can, and if it doesn&rsquo;t work out, you won&rsquo;t have annoyed all of your colleagues.</p>

<p>Having a great job, or working on a great team, means that you&rsquo;re given time to learn or embrace different technologies or techniques. However, if you&rsquo;re not that lucky, side projects can give you the freedom to learn and experiment in ways you wouldn&rsquo;t normally be allowed to.</p>

<h2>Side projects can die without negative consequences</h2>

<p>If you get bored with working on a side project, just stop working on it. A project with paying customers is not a side project. Nobody can honestly expect you to keep working for free on something you find boring.</p>

<p>Work on something different for a while. If the side project doesn&rsquo;t interest you again, forget about it, and thank it for the experience and skills you gained whilst working on it.</p>

<h2>Side projects can force you to think differently</h2>

<p>Compared to your day job, side projects are subject to a different set of constraints. Different constraints means different problems to solve. Your decisions will be different as a result of this.</p>

<p>The main constraint on my side projects is money. At most places I&rsquo;ve worked, the budget is usually huge in comparison to what I can set aside. EC2 instances costs nothing to a corporation, but ~$50/month, multiplied by three for redundancy and replication, soon make a dent in my own finances.</p>

<p>This constraint has also led me to use a lot of free-tiers of hosted-database providers. If a company is willing to provide me with free services, then I&rsquo;m all ears. This was how I was introduced to NoSQL databases, and I gained a completely different perspective on how to store, and query, data.</p>

<h2>Side projects count as experience</h2>

<p>Always be learning. There is a famous quote by Malcolm Gladwell about how doing something for ten thousand hours can help achieve mastery. Whilst this quote is often <a href="https://www.reddit.com/r/IAmA/comments/2740ct/hi_im_malcolm_gladwell_author_of_the_tipping/chx6ku3">out of context</a>, everyone understands that you need to practice something in order to become better at it. The good news, is that you can practice your skills whilst working on a fun side-project.</p>

<p>The second piece of good news, is that you can often use side projects as direct evidence to show off to potential employers. I&rsquo;ve often chatted about my side projects whilst being interviewed, and I&rsquo;ve often chatted about interviewees' side projects whilst I interviewed them. They&rsquo;re a great way to showcase your talents!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Elm in Octopress]]></title>
    <link href="http://cjwebb.github.io/blog/2016/01/01/elm-in-octopress/"/>
    <updated>2016-01-01T07:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2016/01/01/elm-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://elm-lang.org/">Elm</a> is a functional programming language aimed at the browser. It aims to replace all HTML, CSS, and JavaScript code. It borrows a lot from Haskell, and promises that if your Elm code compiles, it will run without exceptions.</p>

<p>Animated, or interactive, examples can greatly enhance blog posts. This is ultimately achieved via embedding HTML, CSS, and JavaScript. My blog is powered by <a href="http://octopress.org/">Octopress</a>, and instead of writing HTML, CSS, and JavaScript, I was interested in using Elm instead.</p>

<h2>Including JavaScript in an Octopress Post</h2>

<p>Running arbitary JavaScript in Octopress is easy. The code below will insert an HTML paragraph into a <code>div</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;elm-goes-here&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;elm-goes-here&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;p&gt;This is set via JavaScript!!&lt;/p&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of inlining the JavaScript, you can include it in the <code>source/javascripts/</code> directory. After publishing, that directory is made available as <code>/javascripts/</code></p>

<h2>Including Elm in an Octopress Post</h2>

<p>As we can use arbitary JavaScript in an Octopress blog post, we can follow a few simple steps, and have the browser running our Elm code instead!</p>

<p><a href="http://elm-lang.org/guide/interop">Elm has interop with JavaScript</a> through HTML embedding (and a couple of other ways). In order to embed in a <code>div</code>, we first need to write and then compile our Elm code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>elm-make Stamps.elm –output=app.js</span></code></pre></td></tr></table></div></figure>


<p>Once compiled, and made available by placing it in the <code>source/javascripts/</code> directory, we can then include it in the blog post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;elm-goes-here&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/javascripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;elm-goes-here&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Elm</span><span class="p">.</span><span class="nx">embed</span><span class="p">(</span><span class="nx">Elm</span><span class="p">.</span><span class="nx">Stamps</span><span class="p">,</span> <span class="nx">elmDiv</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a demonstration, have a quick play with the interactive section below. It is an embedded version of <a href="http://elm-lang.org/examples/stamps">Elm&rsquo;s Stamps Example</a>.
<code>Elm.embed</code> requires a module to import, so if you&rsquo;d like to try this yourself, add the following to the top of your Elm code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Stamps where</span></code></pre></td></tr></table></div></figure>




<div id="elm-goes-here" style="height:200px; border:1px solid; margin-bottom: 30px;"></div>


<script type="text/javascript" src="http://cjwebb.github.io/javascripts/posts/elm-in-octopress/app.js"></script>


<script>
  var element = document.getElementById("elm-goes-here")
  Elm.embed(Elm.Stamps, element);
</script>


<p>If you don&rsquo;t like pentagons, <a href="http://elm-lang.org/examples/">there are lots of other Elm examples</a> to play around with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Play-Framework's PathBindable]]></title>
    <link href="http://cjwebb.github.io/blog/2015/06/23/play-framework-path-binders/"/>
    <updated>2015-06-23T19:45:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2015/06/23/play-framework-path-binders</id>
    <content type="html"><![CDATA[<p>Using custom types in <a href="https://www.playframework.com/documentation/2.4.x/ScalaRouting">Play Framework’s routes file</a> is a major win, and is not something obviously supported. Consider the routes file below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">GET</span> <span class="o">/</span><span class="n">stuff</span><span class="o">/:</span><span class="n">id</span>     <span class="nd">@controllers</span><span class="o">.</span><span class="nc">StuffController</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'><span class="nc">GET</span> <span class="o">/</span><span class="n">things</span><span class="o">/:</span><span class="n">id</span>    <span class="nd">@controllers</span><span class="o">.</span><span class="nc">ThingsController</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">java.util.UUID</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the first route, we take the id parameter as a String. In the second, we take it as a <code>java.util.UUID</code>.</p>

<h2>Advantages</h2>

<p>In our example above, paths that do not contains UUIDs are not matched for the second route. We don’t have to deal with IDs that are not UUIDs.</p>

<p>At the start of a project, you may see lots of lines that say:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">id</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="n">i</span> <span class="k">if</span> <span class="n">isUUID</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">doStuff</span><span class="o">()</span>
</span><span class='line'>   <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">BadRequest</span><span class="o">(</span><span class="err">“</span><span class="n">id</span> <span class="n">must</span> <span class="n">be</span> <span class="n">a</span> <span class="nc">UUID</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By not matching on the route, we can remove this code. A request either matches a route, and is passed to the controller, or it doesn’t, and the controller never knows about the request.</p>

<p>By allowing types, and not just strings, you can avoid <a href="http://c2.com/cgi/wiki?StringlyTyped">stringly-typed</a> controllers. Admittedly, UUIDly-typed is only a small step in the right direction, but still a significant improvement.</p>

<h2>Disadvantages</h2>

<p>You need to fully-qualify the types in the routes file, for example by using <code>java.util.UUID</code> everywhere. You cannot use imports in the routes file. Hopefully someone will find a solution to that at some point.</p>

<h2>Implementation</h2>

<p>There are two things that need doing before you can use custom types in the routes file. Firstly, you must implement a <code>PathBindable</code> and its <code>bind</code> and <code>unbind</code> methods. For a UUID, this is quite simple. The <code>bind</code> method returns an <code>Either</code> so that you can return the a message for why the route did not match.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">util</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.util.UUID</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc.PathBindable</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Binders</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">implicit</span> <span class="k">def</span> <span class="n">uuidPathBinder</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PathBindable</span><span class="o">[</span><span class="kt">UUID</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">bind</span><span class="o">(</span><span class="n">key</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Either</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">UUID</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="nc">Right</span><span class="o">(</span><span class="nc">UUID</span><span class="o">.</span><span class="n">fromString</span><span class="o">(</span><span class="n">value</span><span class="o">))</span>
</span><span class='line'>         <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">IllegalArgumentException</span> <span class="o">=&gt;</span> <span class="nc">Left</span><span class="o">(</span><span class="s">&quot;Id must be a UUID&quot;</span><span class="o">)</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">unbind</span><span class="o">(</span><span class="n">key</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">value</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Secondly, you must make Play aware of this class, by changing your build file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.PlayImport.PlayKeys._</span>
</span><span class='line'>
</span><span class='line'><span class="n">routesImport</span> <span class="o">+=</span> <span class="s">&quot;utils.Binders._&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After those two steps, you can then use types in the routes file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cassandra TTL Is Per Column]]></title>
    <link href="http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column/"/>
    <updated>2015-03-02T11:30:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2015/03/02/cassandra-ttl-is-per-column</id>
    <content type="html"><![CDATA[<p><a href="http://cassandra.apache.org/">Cassandra</a> Time-To-Live (TTL) is decribed in the <a href="http://www.datastax.com/documentation/cql/3.0/cql/cql_using/use_ttl_t.html">Datastax documentation</a>. This blog post briefly explores it to demonstrate that TTL is set per column, and not per row.</p>

<p>We start by recreating the example given in the documentation. We create a keyspace, a table, and insert some data into it. The TTL value is much lower than the offical documentation, as I don&rsquo;t want to wait 24 hours before the TTL runs out.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> CREATE KEYSPACE excelsior WITH REPLICATION =
</span><span class='line'>         { 'class' : 'SimpleStrategy', 'replication_factor': 1 }
</span><span class='line'>
</span><span class='line'>cqlsh> CREATE TABLE excelsior.clicks (
</span><span class='line'>         userid uuid,
</span><span class='line'>         url text,
</span><span class='line'>         date timestamp,
</span><span class='line'>         name text,
</span><span class='line'>         PRIMARY KEY (userid, url)
</span><span class='line'>       );
</span><span class='line'>
</span><span class='line'>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, date, name)
</span><span class='line'>       VALUES (
</span><span class='line'>         3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>         'http://apache.org',
</span><span class='line'>         '2013-10-09', 'Mary')
</span><span class='line'>       USING TTL 60;</span></code></pre></td></tr></table></div></figure>


<p>Now that we have created our keyspace and table, let&rsquo;s query the TTL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;
</span><span class='line'>
</span><span class='line'> ttl(date) | ttl(name)
</span><span class='line'>-----------------------
</span><span class='line'>        52 |        52</span></code></pre></td></tr></table></div></figure>


<h2>Insert or Update to change TTL per column</h2>

<p>As demonstrated by the CQL synatx, TTL is set per column. To demonstrate this, we now insert the data again, but exclude the date.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> INSERT INTO excelsior.clicks (
</span><span class='line'>         userid, url, name)
</span><span class='line'>         VALUES (
</span><span class='line'>           3715e600-2eb0-11e2-81c1-0800200c9a66,
</span><span class='line'>           'http://apache.org',
</span><span class='line'>           'Mary')
</span><span class='line'>         USING TTL 60;
</span><span class='line'>cqlsh> SELECT TTL (date), TTL (name) from excelsior.clicks;
</span><span class='line'>
</span><span class='line'> ttl(date) | ttl(name)
</span><span class='line'>-----------+-----------
</span><span class='line'>        11 |        49</span></code></pre></td></tr></table></div></figure>


<p>If we then wait 11 seconds, we can see that different columns can expire at different times.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cqlsh> select * from excelsior.clicks;
</span><span class='line'>
</span><span class='line'> userid                               | url               | date | name
</span><span class='line'>--------------------------------------+-------------------+------+------
</span><span class='line'> 3715e600-2eb0-11e2-81c1-0800200c9a66 | http://apache.org | null | Mary</span></code></pre></td></tr></table></div></figure>


<p>This can come as a surprise if you&rsquo;re used to rows behaving as one single entity. If you want to update the TTL for an entire row in Cassandra, you need to either insert or update the entire row again with a new TTL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaTest and Twitter Futures]]></title>
    <link href="http://cjwebb.github.io/blog/2015/02/02/scalatest-futures/"/>
    <updated>2015-02-02T19:45:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2015/02/02/scalatest-futures</id>
    <content type="html"><![CDATA[<p>Scala has nice abstractions for asynchronous code. However, writing tests for that code sometimes results in an ugly, unreadable mess. Fortunately, ScalaTest has built-in support for testing Futures, in addition to utilities for other types of asynchronous testing, such as polling and test-probes.</p>

<h2>org.scalatest.concurrent.Futures</h2>

<p>ScalaTest has <a href="http://doc.scalatest.org/2.0/#org.scalatest.concurrent.Futures">a trait named Futures</a> which defines functions such as <code>whenReady</code>, and other goodies like a <code>futureValue</code> method to help your async tests become terser. However, ScalaTest only comes with support for the standard-library Futures. To use them, mixin <code>org.scalatest.concurrent.ScalaFutures</code>.</p>

<p>If, currently like me, you&rsquo;re using <a href="https://twitter.github.io/finagle/guide/Futures.html#futures">Twitter Futures</a>, then you need to define your own support for them. Luckily, it is quite easy to define support for any Futures library.</p>

<p>Behold a TwitterFutures trait:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">com.twitter.util.</span><span class="o">{</span><span class="nc">Throw</span><span class="o">,</span> <span class="nc">Return</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.concurrent.Futures</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">TwitterFutures</span> <span class="k">extends</span> <span class="nc">Futures</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">import</span> <span class="nn">scala.language.implicitConversions</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">convertTwitterFuture</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">twitterFuture</span><span class="k">:</span> <span class="kt">com.twitter.util.Future</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">FutureConcept</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">FutureConcept</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">eitherValue</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Either</span><span class="o">[</span><span class="kt">Throwable</span>, <span class="kt">T</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">twitterFuture</span><span class="o">.</span><span class="n">poll</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Return</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Right</span><span class="o">(</span><span class="n">o</span><span class="o">)</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Throw</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>  <span class="k">=&gt;</span> <span class="nc">Left</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">isCanceled</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">isExpired</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may also have to define an implicit <code>PatienceConfig</code> for your tests as the default settings will timeout after 150 milliseconds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">asyncConfig</span> <span class="k">=</span> <span class="nc">PatienceConfig</span><span class="o">(</span><span class="n">timeout</span> <span class="k">=</span> <span class="n">scaled</span><span class="o">(</span><span class="nc">Span</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="nc">Seconds</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Polling?</h2>

<p>Strangely, ScalaTest chooses to poll futures, despite both Scala and Twitter Futures coming with <code>Await</code> functions that handle timeouts. Using that as a starting point would have seemed more sensible to me. However, I&rsquo;m not the author of a successful Scala testing library, and I&rsquo;m sure that author <a href="http://twitter.com/bvenners">Bill Venners</a> had a reason. However, it is worth noting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mock Responses and Iterate]]></title>
    <link href="http://cjwebb.github.io/blog/2015/01/20/canned-responses/"/>
    <updated>2015-01-20T19:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2015/01/20/canned-responses</id>
    <content type="html"><![CDATA[<p>&lsquo;Agile&rsquo; may now be an overloaded term abused by all kinds of people, but <a href="http://agilemanifesto.org/">the original manifesto</a> is actually still quite relevant. The second point is:</p>

<blockquote><p>Working software over comprehensive documentation</p></blockquote>

<p>This is useful to embrace in many circumstances, and can be expanded to:</p>

<blockquote><p>You should intially favour building software over documenting it. Comprehensive documentation can come later.</p></blockquote>

<p>I have used the following formula for the last few internal APIs I have worked on, and it makes for fun, fast, and collaborative development:</p>

<ol>
<li>Write API layer that returns mock responses</li>
<li>Deploy it</li>
<li>Solicit feedback from those consuming the API</li>
<li>Make changes to API layer to address feedback</li>
<li>Repeat</li>
</ol>


<p>A mock-response is one that does not change, even when API parameters do. It is hardcoded. If you request <code>GET /users/123</code> you get the same data as when requesting <code>GET /users/456</code>.</p>

<p>The point is to get something deployed as quickly as possible, and get feedback on it. When the API is more stable, the mock-responses can become dynamic and then persisted. Soliciting feedback is the highest priority until then. Nobody can write the perfect API the first time, and receiving and responding to feedback as early as possible saves development time later.</p>

<h2>Tools</h2>

<p>There are several tools available to help you develop an API and iterate upon it. <a href="http://wiremock.org/">WireMock</a> can be configured with a routes file, and mock-responses, and can easily run <a href="http://wiremock.org/running-standalone.html">in standalone mode</a>. Just edit a couple of files, and deploy!</p>

<p>If deployment is a problem, check out <a href="https://getsandbox.com/">getsandbox.com</a>. They provide a JavaScript sandbox to easily return some mock-responses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#Code2014]]></title>
    <link href="http://cjwebb.github.io/blog/2014/12/31/code2014/"/>
    <updated>2014-12-31T07:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2014/12/31/code2014</id>
    <content type="html"><![CDATA[<p>As the end of the year approaches, Twitter has a hash-tag named <a href="https://twitter.com/search?src=typd&amp;q=%23code2014">#Code2014</a> that encourages people to tweet which programming languages they&rsquo;ve been using over the last 12 months.</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/hashtag/code2014?src=hash">#code2014</a> : Scala, Clojure, Haskell, Java, JavaScript, Python, Golang, Lua, Racket (and also read some Elixir &amp; Erlang books)</p>&mdash; Colin Webb (@colinjwebb) <a href="https://twitter.com/colinjwebb/status/549941162715660288">December 30, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I joined in, but afterwards felt compelled to explain my thoughts on each in more than 140 characters. Hence this blog post.</p>

<h3>Scala</h3>

<p>My main language, and the one I am gainly employed to write in. I found myself at the Scala Exchange conference again this year, and was pleasantly surprised by the attention that <a href="https://github.com/scalaz/scalaz">Scalaz</a> was receiving. A lot of people were still unconvinced, but the Scalaz talks were very well attended.</p>

<p>I have also found myself immersed in <a href="http://monkey.org/~marius/funsrv.pdf">Twitter&rsquo;s Scala-Ecosystem</a> in the last quarter of the year. I&rsquo;m thoroughly enjoying it. I have become more convinced that Akka is middleware, and Futures (rather than Actors) are more than sufficient for the vast majority of use-cases.</p>

<h3>Java</h3>

<p>First-class functions are so incredibly versatile, that I now get frustrated when using Java.</p>

<p>On a related note, this tweet amused me this year:</p>

<blockquote class="twitter-tweet" lang="en"><p>OH: &quot;But functional programming is too complicated.&quot; <a href="http://t.co/ksPeGgvMgE">pic.twitter.com/ksPeGgvMgE</a></p>&mdash; Bryan Maass (@escherize) <a href="https://twitter.com/escherize/status/546812640387809280">December 21, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>For a greenfield project, I&rsquo;m not sure why I would ever choose Java over Scala again.</p>

<h3>Haskell</h3>

<p>It has been said that Scalaz is a gateway drug from Scala to Haskell, but it is the blurred lines between OOP and FP in Scala that occasionally irritate me. As a pure language, Haskell will hopefully not have the same kind of problems. I have now finally finished reading <a href="http://learnyouahaskell.com/">LYAHFGG</a> and I will start writing more things in Haskell next year.</p>

<h3>Clojure</h3>

<p>I was incredibly excited by Clojure at the beginning of the year, but my excitement is beginning to wane. I would love to love Clojure; the collections libraries are magnificent, it is incredibly concise, and the premise of <a href="http://en.wikipedia.org/wiki/S-expression">s-expressions</a> is compelling. However, the lack of static typing constantly annoys me. <a href="https://github.com/clojure/core.typed">Typed Clojure</a> and/or <a href="https://github.com/Prismatic/schema">Prismatic Schema</a> may alleviate my concerns though. I need to spend more time investigating them.</p>

<h3>Racket</h3>

<p>I have been working my way through <a href="http://www.amazon.co.uk/The-Little-Schemer-Daniel-Friedman/dp/0262560992">The Little Schemer</a>, and apparently they had renamed Scheme to Racket.
I&rsquo;m not convinced it is as nice as Clojure, but might be worth investigating <a href="http://docs.racket-lang.org/ts-guide/">Typed Racket</a> if the libraries to provide typing in Clojure don&rsquo;t turn out very well.</p>

<h3>JavaScript</h3>

<p>JavaScript is still the only realistic choice when writing for the browser, which means that it will be necessary for years to come. I spent a lot more time using it this year, having written both client-side and server-side JavaScript over the past twelve months.</p>

<p>I also re-read <a href="http://www.amazon.co.uk/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts</a>, shortly followed by the excellent <a href="http://www.amazon.co.uk/Functional-JavaScript-Introducing-Programming-Underscore-js/dp/1449360726">Functional JavaScript</a>. The latter shows that JavaScript could actually be a very nice language, if everyone followed the same path.</p>

<p>The &ldquo;Good Parts&rdquo; are constantly shrinking though, as Douglas Crockford revised his advice:</p>

<blockquote class="twitter-tweet" lang="en"><p>Doug Crockford has stopped using &quot;this&quot;, null and falsiness in JS - fantastic advice. <a href="https://twitter.com/hashtag/fullstackcon?src=hash">#fullstackcon</a> <a href="http://t.co/nGfAsj5cpm">pic.twitter.com/nGfAsj5cpm</a></p>&mdash; James Pamplin (@pampo) <a href="https://twitter.com/pampo/status/525208703197523968">October 23, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>It might be nice to see a new CoffeScript-esque JavaScript compiler that errors if you don&rsquo;t use the Good Parts. Either that, or I need to spend time having a proper look at <a href="https://github.com/clojure/clojurescript">ClojureScript</a> and <a href="http://www.purescript.org/">PureScript</a>.</p>

<h3>Python</h3>

<p>Python is my default scripting language. I enjoyed <a href="https://www.paypal-engineering.com/2014/12/10/10-myths-of-enterprise-python/">PayPal debunking some myths of Enterprise Python</a>, but Python is slow and lacks good concurrency support in comparison to Scala.</p>

<h3>Golang</h3>

<p>I have written a couple of utilities and one website in Golang this year. It could potentially replace Python as my default &ldquo;operations&rdquo; language once I learn more of the standard library.</p>

<p>It is annoying that it doesn&rsquo;t have a <code>map</code> function though, and without immutable data structures, I probably won&rsquo;t ever trust it to build anything complicated.</p>

<h3>Lua</h3>

<p>Lua is a language I will spend more quality time with in 2015. Having previously worked with Lua when embedding it in Redis, I was excited to discover <a href="http://openresty.org/">OpenResty</a> and being able to embed it into NGINX. I also want to investigate using <a href="http://willcrichton.github.io/terracuda/">Lua for CUDA GPU Programming</a>.</p>

<h2>More In 2015?</h2>

<p>Aside from those already listed, I need to spend some time with Erlang next year. I have now read a couple of books about it (including the excellent <a href="http://learnyousomeerlang.com/">Learn You Some Erlang</a>), and I really need to write some to experience it firsthand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monoids]]></title>
    <link href="http://cjwebb.github.io/blog/2014/10/02/monoids/"/>
    <updated>2014-10-02T22:00:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2014/10/02/monoids</id>
    <content type="html"><![CDATA[<blockquote><p>In abstract algebra, a branch of mathematics, a monoid is an algebraic structure with a single associative binary operation and an identity element. Monoids are studied in semigroup theory as they are semigroups with identity.</p></blockquote>

<p><a href="http://en.wikipedia.org/wiki/Monoid">Wikipedia has the above definition of a Monoid</a>. This blog post will desconstruct that definition to simply describe what a monoid is, and why you would want to use one.</p>

<p>We will, however, ignore a proper defintion of &lsquo;abstract algebra&rsquo; as that would mean writing several textbooks. Just imagine an &lsquo;algebraic structure&rsquo; as a thing that contains functions. A &lsquo;thing that contains functions&rsquo; is sometimes named a class in programming languages.</p>

<p>So, with that out of the way, this is the list of things we will cover:</p>

<ul>
<li>Associative</li>
<li>Semigroup</li>
<li>Identity</li>
</ul>


<h2>Associative</h2>

<p>You should have learnt some associative things during Mathematics lessons at primary school. Addition and Multiplication are associative. Subtraction and Division are not. Associativity means that you can reorder operations on a list of things, and always receive the same result.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">((((</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="mi">3</span><span class="o">)</span> <span class="o">+</span> <span class="mi">4</span><span class="o">)</span> <span class="o">+</span> <span class="mi">5</span><span class="o">)</span> <span class="k">=</span> <span class="mi">15</span>
</span><span class='line'><span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="mi">2</span> <span class="o">+</span> <span class="o">(</span><span class="mi">3</span> <span class="o">+</span> <span class="o">(</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">5</span><span class="o">))))</span> <span class="k">=</span> <span class="mi">15</span> <span class="c1">// reordered, same result</span>
</span><span class='line'><span class="o">((((</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span> <span class="o">-</span> <span class="mi">3</span><span class="o">)</span> <span class="o">-</span> <span class="mi">4</span><span class="o">)</span> <span class="o">-</span> <span class="mi">5</span><span class="o">)</span> <span class="k">=</span> <span class="o">-</span><span class="mi">13</span>
</span><span class='line'><span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="o">(</span><span class="mi">2</span> <span class="o">-</span> <span class="o">(</span><span class="mi">3</span> <span class="o">-</span> <span class="o">(</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">5</span><span class="o">))))</span> <span class="k">=</span> <span class="mi">3</span> <span class="c1">// reordered, different result</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Semigroup</h2>

<p>Semigroup is the name for a thing that provides an associative function. For Integers, <code>+</code> and <code>*</code> are associative functions. A Semigroup is one of those &ldquo;algebraic structures&rdquo;, and it has one function; an associative one.</p>

<p>It would looks like this, for adding up Integers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">AdditionSemigroup</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">associative</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is worth noting that a Semigroup will apply to a whole type. This Semigroup will apply to all <code>Int</code>, as denoted by the square brackets after the class name. The example is written in Scala, where <code>Int</code> is an alias for <code>Integer</code>.</p>

<h2>Identity</h2>

<p>Also known as the zero value, or the &lsquo;value for which nothing happens&rsquo;. This will depend on what your monoid does. For instance, for an adding monoid, the identity value will be zero. Adding zero to <code>x</code> gives you <code>x</code>. For multiplication, the identity value will be 1. Multiplying 1 by <code>x</code> gives you <code>x</code>. If we had kept the identity value as zero, multiplying <code>x</code> by zero would return zero, thereby being useless. Likewise, any other value would mess up our calculation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>     <span class="k">=</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">0</span> <span class="k">=</span> <span class="mi">2</span> <span class="c1">// we can add an &#39;identity&#39; of zero at any point</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span>     <span class="k">=</span> <span class="mi">16</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">1</span> <span class="k">=</span> <span class="mi">16</span> <span class="c1">// we can add an &#39;identity&#39; of 1 at any point.</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">0</span> <span class="k">=</span> <span class="mi">0</span>  <span class="c1">// an &#39;identity&#39; of zero doesn&#39;t work for multiplication</span>
</span><span class='line'><span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">=</span> <span class="mi">32</span> <span class="c1">// neither does any other value. It has to be 1!</span>
</span></code></pre></td></tr></table></div></figure>


<h2>So what is a monoid?</h2>

<p>A monoid, has an associative function, and it has an identity function. As you may be able to tell from the wikipedia description, it really is a Semigroup, but with an identity function.</p>

<p>As shown above, the <code>+</code> operator on Integers is associative, and we know that the zero value for this is <code>0</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">AdditionMonoid</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">identity</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">associative</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why is this useful?</h2>

<p>Consider the following Scala example. <code>|+|</code> is an alias for our previously-seen associative method. This particular associative method (<a href="https://github.com/scalaz/scalaz/blob/49b235695f1d3ae3217a70b419cbb33337f31ade/core/src/main/scala/scalaz/std/Map.scala#L113">taken from scalaz</a>) merges two Maps together by summing the values if the keys are equal.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scalaz.Scalaz._</span> <span class="c1">// this defines the |+| operator.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;a&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0</span><span class="o">,</span> <span class="s">&quot;b&quot;</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">)</span> <span class="o">|+|</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;a&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">)</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Map</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mf">0.0</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also take advantage of the <code>reduce</code> method to do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Map</span><span class="o">(</span><span class="s">&quot;a&quot;</span> <span class="o">-&gt;</span> <span class="mf">1.0</span><span class="o">,</span> <span class="s">&quot;b&quot;</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">),</span> <span class="nc">Map</span><span class="o">(</span><span class="s">&quot;a&quot;</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">)).</span><span class="n">reduce</span><span class="o">(</span><span class="k">_</span> <span class="o">|+|</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">scala.collection.immutable.Map</span><span class="o">[</span><span class="kt">String</span>,<span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="mf">0.0</span><span class="o">,</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="mf">3.0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you can define your problem as a Monoid, it becomes trivial to compute, and trivial to parallelise too. Remember, associative functions can be batched and executed in any order.</p>

<p>Hopefully it is becoming clear why this is useful. If you want to add Integers together, most languages already include basic addition. However, Monoids can potentially be written for any type of data. As long as you define <code>identity</code> and <code>associative</code>, they can do anything you want!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aggregation Services in Node.js]]></title>
    <link href="http://cjwebb.github.io/blog/2014/07/16/aggregation-services-in-nodejs/"/>
    <updated>2014-07-16T19:30:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2014/07/16/aggregation-services-in-nodejs</id>
    <content type="html"><![CDATA[<p><a href="http://cjwebb.github.io/blog/2014/03/26/aggregation-service-using-play-json/">My previous blog post</a> talked about building Aggregation Services using Play-JSON. In it, I mentioned that Aggregation Services using JavaScript might be quite nice. As JSON is native to JavaScript, you might expect manipulating JSON in JavaScript to be incredibly simple. And you would be correct!</p>

<p>Below is the same functionality as last time, but with Node.js. To recap, we fetch an article <code>a1</code>, which contains a list of products ids <code>[s1, s2, s3]</code>. We load the article, and then have to fetch all the products it contains.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">async</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// where our json data lives</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;s3&quot;</span><span class="o">:</span> <span class="s2">&quot;https://gist.githubusercontent.com/cjwebb/aef1f4fb2ca6d01f8b63/raw/0b6eb2c9b55a6720ccf41ee4ff8cca053cfda063/product-s3.json&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;s2&quot;</span><span class="o">:</span> <span class="s2">&quot;https://gist.githubusercontent.com/cjwebb/2d7fce88ce6594325bec/raw/fe025c2eafb8aeca953999f10663b83863a14d25/product-s2.json&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;s1&quot;</span><span class="o">:</span> <span class="s2">&quot;https://gist.githubusercontent.com/cjwebb/814c6337b0f04f1cfeba/raw/dc9b297a96c0bd8870436413e51efa2a36168308/product-s1.json&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;a1&quot;</span><span class="o">:</span> <span class="s2">&quot;https://gist.githubusercontent.com/cjwebb/c26c42e03ea8573efd4c/raw/75479f6f2d218ac6212e4f4b53fc7e30746228bd/article-a1.json&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fetchProduct</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">item</span><span class="p">],</span> <span class="p">{</span><span class="nx">json</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">&#39;a1&#39;</span><span class="p">],</span> <span class="p">{</span><span class="nx">json</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">body</span><span class="p">[</span><span class="s1">&#39;product_list&#39;</span><span class="p">],</span> <span class="nx">fetchProduct</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">// mutate all the state!!  </span>
</span><span class='line'>          <span class="nx">body</span><span class="p">[</span><span class="s1">&#39;product_list&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">results</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span> <span class="k">return</span> <span class="nx">n</span> <span class="p">});</span>  
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>    
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having worked a lot with Scala and Clojure recently, I keep forgetting that one can actually mutate variables! If the service is kept relatively small, the mutation should be forgiveable.</p>

<p>This isn&rsquo;t production-ready code. Error handling is missing for the first HTTP request, and if <code>fetchProduct</code> returns an error, erroring products are filtered out. Hopefully though, the code gives a flavour of what an Aggregation service written in Node.js would look like.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aggregation Services using Play JSON]]></title>
    <link href="http://cjwebb.github.io/blog/2014/03/26/aggregation-service-using-play-json/"/>
    <updated>2014-03-26T19:30:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2014/03/26/aggregation-service-using-play-json</id>
    <content type="html"><![CDATA[<p>Aggregation services (sometimes known as Composite or Hydration services) are useful when working in SOA. In SOA, services are responsible for discrete objects and collections, yet still often need to reference other object or collections controlled by another service. This is done via referencing Ids. In order to display something useful to the user it is necessary to lookup data from multiple sources and aggregate them together.</p>

<p>Let&rsquo;s look at an example, containing one of my favourite foods:</p>

<h2>Mmm, Sandwiches</h2>

<p>Colin’s Sandwich Shop has a website, that along with selling and delivering sandwiches, also writes a few articles about topical events in the sandwich industry. These articles also contain relevant sandwiches, which the reader will hopefully then purchase.</p>

<p>They have the following APIs, starting with the Article Service:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /article/a1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;a1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Top 3 Sandwiches&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;They all contain bacon.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;product_list&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;s1&quot;</span><span class="p">,</span> <span class="s2">&quot;s2&quot;</span><span class="p">,</span> <span class="s2">&quot;s3&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that <code>product_list</code> contains only identifiers, not full products.</p>

<p>The sandwich shop also has a product API, which enables lookup of a product by id:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /product/s1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;s1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Chicken &amp; Bacon&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;image&quot;</span><span class="p">:</span> <span class="s2">&quot;img/sandwich/s1.jpg&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to display the articles, the consumer of the API needs to fetch the article, fetch all the products in <code>product_list</code> and then aggregate the results.</p>

<p>The API of the aggregation service would therefore be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /article/a1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;a1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Top 3 Sandwiches&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="s2">&quot;They all contain bacon.&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;product_list&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;s1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Club Sandwich&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;image&quot;</span><span class="p">:</span> <span class="s2">&quot;img/sandwich/s1.jpg&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;s2&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Chicken &amp; Bacon&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;image&quot;</span><span class="p">:</span> <span class="s2">&quot;img/sandwich/s2.jpg&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;s3&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;BLT&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;image&quot;</span><span class="p">:</span> <span class="s2">&quot;img/sandwich/s3.jpg&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Is Scala the right tool?</h2>

<p>When faced with constructing an aggregation service in Scala most people start by defining the case classes they will need to model the data. This is the workflow, if you convert to case classes:</p>

<blockquote><p>Read JSON -> Convert to case classes -> Change stuff -> Write JSON</p></blockquote>

<p>We obviously need to read JSON from somewhere. We need to change stuff about it, and we need to write it back out again. What exactly does converting to case classes give us? It does have very apparent drawbacks:</p>

<h3>Advantages of converting to case-classes</h3>

<ul>
<li>We can easily fetch fields</li>
<li>Normal Scala static typing</li>
</ul>


<h3>Disadvantages of converting to case-classes</h3>

<ul>
<li>Need to write and maintain the case classes.</li>
<li>Need to write and maintain lenses, or zippers, to update nested immutable data.</li>
<li>If JSON contains more than 22 fields, Scala case classes are useless.</li>
</ul>


<p>Writing <a href="http://stackoverflow.com/questions/3900307/cleaner-way-to-update-nested-structures">Lenses or Zippers</a> is required for updating nested immutable case classes. Using the standard library to do this is not pretty.</p>

<p>However, the biggest cost of this method is the maintenance of the cases classes and the lenses/zippers. If the Article service starts returning more data, we have to update the aggregation service too. Similarly, if the product service returns more data, we have to update the aggregation service again.</p>

<p>Converting the JSON to case classes is very rigid. It would be nice if the data just flowed through the aggregation service, and we could apply transformations to it:</p>

<blockquote><p>Read JSON -> Change stuff -> Write JSON</p></blockquote>

<p>The alternatives to using Scala case-classes are to ignore type-safey, and model everything as a <code>Map[Any]</code>. If we&rsquo;re doing that, we may as well use a dynamic language. Aggregation services in JavaScript, Python or Clojure are probably quite nice too.</p>

<p>Or we stick with Scala, and use <a href="http://www.playframework.com/documentation/2.2.x/ScalaJson">Play JSON</a> and <a href="https://github.com/mandubian/play-json-zipper">Play-JSON-zipper</a>.</p>

<h2>Play JSON Transformations</h2>

<p>Play&rsquo;s JSON library provides something akin to <a href="http://goessner.net/articles/JsonPath/">JSONPath</a> functionality. We can search for, update, or delete anything we want to. Let&rsquo;s continue our example, and look at how an aggregation service for Colin&rsquo;s Sandwich Shop could be built.</p>

<p>How do we find all the product ids from some JSON? Easy! We use the recursive search of Play JSON to find anything named &ldquo;product_list&rdquo;, and can be read as <code>List[String]</code>. The symbol <code>\\</code> will return a list of matches, which we then convert to <code>List[String]</code> and flatten.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">findProductIds</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="o">(</span><span class="n">articleJson</span> <span class="o">\\</span> <span class="s">&quot;product_list&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]])</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatten</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple. How then do we update the JSON, given a map of Products by ProductId? Play JSON is limited in this regard, and I&rsquo;ve found the easiest way is to use <a href="https://github.com/mandubian/play-json-zipper">Play-Json-Zipper</a> instead.</p>

<p>The method <code>updateAll</code> takes a <code>PartialFunction[(JsPath, JsValue), JsValue])</code> so we can limit the scope of the update, and then replace ids with fully-fledged products.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">replaceProductIdsWithProducts</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">,</span>
</span><span class='line'>                                  <span class="n">productMap</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">JsValue</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="k">:</span> <span class="kt">JsPath</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">JsPathExtension</span><span class="o">.</span><span class="n">hasKey</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;product_list&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">.</span><span class="n">collect</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">productMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">}.</span><span class="n">flatten</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">articleJson</span><span class="o">.</span><span class="n">updateAll</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">jsPath</span><span class="o">,</span> <span class="nc">JsArray</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span> <span class="k">if</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">JsArray</span><span class="o">(</span><span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two simple functions provide the only complexity of the aggregation service. The rest is just manipulating <code>Future</code> to fetch the article, products, and return a result. In the end, we can do the entire workflow in about 50 lines of code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">Await</span><span class="o">,</span> <span class="nc">Future</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.extensions._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Main</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="mi">1</span> <span class="n">second</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">actorSystem</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">dispatcher</span> <span class="k">=</span> <span class="n">actorSystem</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">articleApi</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ArticleApi</span><span class="o">()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">productApi</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ProductApi</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">findProductIds</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="o">(</span><span class="n">articleJson</span> <span class="o">\\</span> <span class="s">&quot;product_list&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">asOpt</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]])</span>
</span><span class='line'>      <span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fetchProducts</span><span class="o">(</span><span class="n">productIds</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">JsValue</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Future</span><span class="o">.</span><span class="n">traverse</span><span class="o">(</span><span class="n">productIds</span><span class="o">){</span> <span class="n">id</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">productApi</span><span class="o">.</span><span class="n">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="n">map</span> <span class="o">(</span><span class="n">pOpt</span> <span class="k">=&gt;</span> <span class="n">pOpt</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">p</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">p</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">}</span> <span class="n">map</span> <span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">toMap</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">replaceProductIdsWithProducts</span><span class="o">(</span><span class="n">articleJson</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">productMap</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">JsValue</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="k">:</span> <span class="kt">JsPath</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span>
</span><span class='line'>      <span class="nc">JsPathExtension</span><span class="o">.</span><span class="n">hasKey</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Some</span><span class="o">(</span><span class="s">&quot;product_list&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">])</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">arr</span><span class="o">.</span><span class="n">collect</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">JsString</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">productMap</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">}.</span><span class="n">flatten</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">articleJson</span><span class="o">.</span><span class="n">updateAll</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">(</span><span class="n">jsPath</span><span class="o">,</span> <span class="nc">JsArray</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span> <span class="k">if</span> <span class="n">isProductList</span><span class="o">(</span><span class="n">jsPath</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="nc">JsArray</span><span class="o">(</span><span class="n">replaceWithProducts</span><span class="o">(</span><span class="n">arr</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">transform</span><span class="o">()</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">JsValue</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">article</span> <span class="k">&lt;-</span> <span class="n">articleApi</span><span class="o">.</span><span class="n">getArticle</span><span class="o">(</span><span class="s">&quot;a1&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">productIds</span> <span class="k">&lt;-</span> <span class="nc">Future</span> <span class="o">{</span> <span class="n">findProductIds</span><span class="o">(</span><span class="n">article</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">products</span> <span class="k">&lt;-</span> <span class="n">fetchProducts</span><span class="o">(</span><span class="n">productIds</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">replaceProductIdsWithProducts</span><span class="o">(</span><span class="n">article</span><span class="o">,</span> <span class="n">products</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">transform</span><span class="o">(),</span> <span class="mi">2</span> <span class="n">seconds</span><span class="o">))</span>
</span><span class='line'>  <span class="n">actorSystem</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As per usual, <a href="https://github.com/cjwebb/blog-code/tree/master/aggregation-services">working code is available on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci Numbers in Scala]]></title>
    <link href="http://cjwebb.github.io/blog/2013/10/30/fibonacci-numbers-in-scala/"/>
    <updated>2013-10-30T20:45:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2013/10/30/fibonacci-numbers-in-scala</id>
    <content type="html"><![CDATA[<p>Working out the <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci numbers</a> are a standard exercise when learning a programming language, or just refreshing your knowledge. Below, is a recap of various ways to calculate them in Scala. <a href="https://gist.github.com/cjwebb/7239843">All the code is available in a handy gist</a>.</p>

<p>First, a quick recap of the beginning of the series. If this is unfamiliar to you, please click the first link in this post!</p>

<blockquote><p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55</p></blockquote>

<h3>Nth Fibonacci Number</h3>

<blockquote><p>Given a number n, return the corresponding Fibonacci number from the sequence.</p></blockquote>

<p>Lets start off really basically, and use a while loop.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib_iter</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">ans</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">n1</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">n2</span> <span class="k">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="n">i</span> <span class="k">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">i</span> <span class="k">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">ans</span> <span class="k">=</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span>
</span><span class='line'>      <span class="n">n1</span> <span class="k">=</span> <span class="n">n2</span>
</span><span class='line'>      <span class="n">n2</span> <span class="k">=</span> <span class="n">ans</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="n">ans</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing to notice about the Fibonacci sequence is that the first two numbers match their indexes. The 0th number is 0, and the 1st number is 1. These form the foundation of later calculations, and is the reason for the if-statement on line 2 of the code snippet.</p>

<p>We can do better though. Fibonacci sequences rely on previous calculations, so are an ideal opportunity to use recursion:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib_recur</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">n</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="k">=&gt;</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">i</span> <span class="k">=&gt;</span> <span class="n">fib_recur</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fib_recur</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks good! Basically only two lines of code, and its fairly easy to follow. However, the keen-eyed amongst you may note that for large values of n, a <code>StackOverflowException</code> may be thrown! To prevent these exceptions when writing recursive code, it is encouraged that we write in a tail-recursive form. <a href="http://blog.richdougherty.com/2009/04/tail-calls-tailrec-and-trampolines.html">The compiler will attempt to optimise the recursion</a>.</p>

<p>Also note that for large n&rsquo;s, we need to use <code>BigInt</code> to avoid integer overflow.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib_tailrec</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@tailrec</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">rec</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span><span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">n</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="n">b</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">rec</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">,</span> <span class="n">a</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">rec</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent!</p>

<h3>Fibonacci Series, of length n</h3>

<blockquote><p>Given a number n, return the fibonacci series of length n.</p></blockquote>

<p>This time, instead of returning one number, we want a whole series. Well, we already have a function that returns the nth Fibonacci number, lets just use that!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">bad_fib</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="mi">0</span> <span class="n">to</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="n">map</span> <span class="o">(</span><span class="n">n</span> <span class="k">=&gt;</span> <span class="n">fib_tailrec</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whilst we should really benchmark this, to see exactly how terrible it is, we will assume that is too inefficient; it forgets all previous calculations when trying to work out the next number.</p>

<p>How else can we do this then? We can use an accumulator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib_acc</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@tailrec</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">acc</span><span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="n">list</span>
</span><span class='line'>    <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">newList</span> <span class="k">=</span> <span class="n">list</span> <span class="o">:::</span> <span class="nc">List</span><span class="o">(</span><span class="n">list</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)+</span><span class="n">list</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">))</span>
</span><span class='line'>      <span class="n">acc</span><span class="o">(</span><span class="n">newList</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">acc</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> <span class="mi">2</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has a nasty list creation to append the number onto the end of the list. We have to pass around <code>i</code> everywhere.
Scala&rsquo;s <code>List</code> is a Linked List. Appending is hard, but prepending is easy. This is what the cons operator is for! By constructing the list in reverse we can optimise for a linked list, and remove the <code>i</code> value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib_acc2</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">s</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">))</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">)</span> <span class="n">s</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">fib_acc2</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">s</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="n">s</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">::</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Marvellous. It does get better though. For those of you familiar with <code>Stream</code>, you can do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib_stream</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">fibs</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="mi">0</span> <span class="o">#::</span> <span class="n">fibs</span><span class="o">.</span><span class="n">scanLeft</span><span class="o">(</span><span class="mi">1</span><span class="o">)(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>  <span class="n">fibs</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="o">).</span><span class="n">toList</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The crazy <code>#::</code> operator prepends an element to the start of the Stream, and <code>scanLeft</code> works just like <code>foldLeft</code> but returns a Stream. <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream">The Scaladoc for Stream</a> actually contains a different version of how to calculate a Fibonacci sequence, but I prefer to use <code>scanLeft</code> for its terseness, and the analogy with <code>foldLeft</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka Camel and ActiveMQ]]></title>
    <link href="http://cjwebb.github.io/blog/2013/09/01/akka-camel-and-activemq/"/>
    <updated>2013-09-01T07:00:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2013/09/01/akka-camel-and-activemq</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="http://doc.akka.io/docs/akka/snapshot/scala/camel.html" title="Akka Camel">Akka Camel</a> and <a href="http://activemq.apache.org/" title="Active MQ">ActiveMQ</a> recently, as part of a delayed worker-queue system. Given the lack of good googleable information about combining the two, I thought it would be useful if I explained briefly how to get Akka Camel and ActiveMQ to work together in the form of a quick example.</p>

<h2>Producers and Consumers</h2>

<p>Akka Camel uses the concept of producers and consumers, and makes it very easy to link them to ActiveMQ. Let&rsquo;s try publishing a message to an ActiveMQ queue, and then using a consumer to read the messages back.</p>

<p>First, let&rsquo;s implement Producer and Consumer actors. For an actor to produce messages, extend <code>akka.camel.Producer</code> and implement <code>endpointUri</code>. Likewise, to implement an actor to consume messages, extend <code>akka.camel.Consumer</code> and implement the same <code>endpointUri</code>. As the consumer will be receiving messages, you will also need to implement the standard actor <code>receive</code> method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.camel._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SimpleProducer</span><span class="o">()</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="k">with</span> <span class="nc">Producer</span> <span class="k">with</span> <span class="nc">OneWay</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">endpointUri</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;activemq:foo.bar&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SimpleConsumer</span><span class="o">()</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="k">with</span> <span class="nc">Consumer</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">endpointUri</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;activemq:foo.bar&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">msg</span><span class="k">:</span> <span class="kt">CamelMessage</span> <span class="o">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These actors will communicate using the ActiveMQ queue named &ldquo;foo.bar&rdquo;. The consumer will print any received messages to the console. As this is a publish-subscribe system, we also need to extend our SimpleProducer with the <code>OneWay</code> trait. This tells Camel that our producer won&rsquo;t be participating in any request-reply messaging patterns.</p>

<h2>Setting up Akka Camel</h2>

<p>Now that we have a Producer and a Consumer, we need to wire a CamelExtension into an ActorSystem to tell it how to use ActiveMQ. In this example, ActiveMQ is running on <code>localhost:61616</code>. The component name needs to match the protocol specified in the producer and consumer endpoints.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.camel._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.apache.activemq.camel.component.ActiveMQComponent</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.apache.activemq.ScheduledMessage._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">actorSystem</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;CamelTesting&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">CamelExtension</span><span class="o">(</span><span class="n">actorSystem</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">amqUrl</span> <span class="k">=</span> <span class="n">s</span><span class="s">&quot;nio://localhost:61616&quot;</span>
</span><span class='line'><span class="n">system</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">addComponent</span><span class="o">(</span><span class="s">&quot;activemq&quot;</span><span class="o">,</span> <span class="nc">ActiveMQComponent</span><span class="o">.</span><span class="n">activeMQComponent</span><span class="o">(</span><span class="n">amqUrl</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create consumer and producer</span>
</span><span class='line'><span class="k">val</span> <span class="n">simpleConsumer</span> <span class="k">=</span> <span class="n">actorSystem</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleConsumer</span><span class="o">])</span>
</span><span class='line'><span class="k">val</span> <span class="n">simpleProducer</span> <span class="k">=</span> <span class="n">actorSystem</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleProducer</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have linked Akka to ActiveMQ, let&rsquo;s send messages through it! As our producer is an akka-actor, we can send messages to it just like any other.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">simpleProducer</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">simpleProducer</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(</span><span class="s">&quot;second&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">simpleProducer</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(</span><span class="s">&quot;third&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">delayedMessage</span> <span class="k">=</span> <span class="nc">CamelMessage</span><span class="o">(</span><span class="nc">Message</span><span class="o">(</span><span class="s">&quot;delayed fourth&quot;</span><span class="o">),</span> <span class="nc">Map</span><span class="o">(</span><span class="nc">AMQ_SCHEDULED_DELAY</span> <span class="o">-&gt;</span> <span class="mi">3000</span><span class="o">))</span>
</span><span class='line'><span class="n">simpleProducer</span> <span class="o">!</span> <span class="n">delayedMessage</span>
</span></code></pre></td></tr></table></div></figure>


<p>The fourth messages makes use of ActiveMQ&rsquo;s scheduled delay feature. To do this, we had to send a <code>CamelMessage</code> with modified headers. All available CamelMessage options are available here. Unfortunately, this does leak knowledge of ActiveMQ outside of our SimpleProducer, but introducing a level of indirection would easily solve it.</p>

<h2>Conclusion</h2>

<p>We have sent messages through ActiveMQ using Akka-Camel, all in about 40 lines of code. A working example can be <a href="https://github.com/cjwebb/blog-code/blob/master/akka-camel-and-actimemq/src/main/scala/AkkaCamelAndActiveMQ.scala" title="Github codez">viewed on Github</a>. As it is possible for our actors to hide their implementation from those around them, ActiveMQ can be worked into a system using Akka without much hassle at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing in Scala with DSLs]]></title>
    <link href="http://cjwebb.github.io/blog/2013/07/20/testing-in-scala-with-dsls/"/>
    <updated>2013-07-20T12:00:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2013/07/20/testing-in-scala-with-dsls</id>
    <content type="html"><![CDATA[<p>Using a DSL to write a test can prove to be useful, especially when there are lots of prerequisites, or the problem is complex. Having a test that is incredibly readable reduces complexity overhead and aids reader comprehension. Any tests that require the reader to retain a mental map could benefit from a DSL.</p>

<p>It is worth experimenting to see what advantages a DSL provides to your tests. If your tests are short and readable without, it will be a waste of time trying to use a DSL.</p>

<h2>What is a DSL?</h2>

<p><a href="http://en.wikipedia.org/wiki/Domain-specific_language">The Wikipedia article says:</a></p>

<blockquote><p>A domain-specific language (DSL) is a type of programming language or specification language in software development and domain engineering dedicated to a particular problem domain, a particular problem representation technique, and/or a particular solution technique.</p></blockquote>

<p>The definition of a DSL makes it quite clear that a DSL is tailored to fit a particular problem. The article also explains that a DSL should be far more expressive than is achievable by a general purpose language, and that they should be as concise a definition as possible.</p>

<blockquote><p>What is the most concise, readable way of expressing my problem?</p></blockquote>

<p>It is often best to aim for natural language. Modeling the problem this way hugely increases readability, and has the benefit that anyone can understand it. Many people start using symbols to represent the domain, but this further complicates matters.</p>

<p>For example, which of the following two lines is the most understandable?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alice ~> bob
</span><span class='line'>alice isFriendsWith bob</span></code></pre></td></tr></table></div></figure>


<p>For a newcomer to the code, the symbol&rsquo;s meaning will have to be looked up. However, isFriendsWith is a concept familiar to any English speaker over the age of five. Always ask yourself, what is the most concise, readable way of expressing my problem?</p>

<h2>Code Under Test</h2>

<p>To demonstrate testing with a DSL, let&rsquo;s read some tests. They cover the most ubiquitous of use cases in the modern web: a social friends graph.</p>

<p>What is the specification of our FriendsGraph?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FriendsGraphSpec:
</span><span class='line'> - can store and retrieve people
</span><span class='line'> - can store a friend
</span><span class='line'> - retrieves friends, first in last out</span></code></pre></td></tr></table></div></figure>


<p>The tests, and the code under test, are <a href="http://github.com">available on Github</a>.</p>

<h3>Test Without a DSL</h3>

<p>This is probably what a lot of tests look like before refactoring. There is room for improvement, but the test itself is fairly readable.</p>

<figure class='code'><figcaption><span>FriendsGraphSpec.scala </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.matchers.ShouldMatchers</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.</span><span class="o">{</span><span class="nc">OneInstancePerTest</span><span class="o">,</span> <span class="nc">FreeSpec</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FriendsGraphSpec</span> <span class="k">extends</span> <span class="nc">FreeSpec</span> <span class="k">with</span> <span class="nc">ShouldMatchers</span> <span class="k">with</span> <span class="nc">OneInstancePerTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FriendsGraph</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;can store and retrieve people&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">alice</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;alice-id&quot;</span><span class="o">,</span> <span class="s">&quot;Alice&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">putPerson</span><span class="o">(</span><span class="n">alice</span><span class="o">)</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">getPerson</span><span class="o">(</span><span class="n">alice</span><span class="o">.</span><span class="n">id</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span> <span class="o">(</span><span class="nc">Some</span><span class="o">(</span><span class="n">alice</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;can store a friend&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">alice</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;alice-id&quot;</span><span class="o">,</span> <span class="s">&quot;Alice&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">bob</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;bob-id&quot;</span><span class="o">,</span> <span class="s">&quot;Bob&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">putPerson</span><span class="o">(</span><span class="n">alice</span><span class="o">)</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">putPerson</span><span class="o">(</span><span class="n">bob</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">makeFriends</span><span class="o">(</span><span class="n">alice</span><span class="o">,</span> <span class="n">bob</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">getFriends</span><span class="o">(</span><span class="n">alice</span><span class="o">.</span><span class="n">id</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span> <span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">bob</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;retrieves friends, first in last out&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">alice</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;alice-id&quot;</span><span class="o">,</span> <span class="s">&quot;Alice&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">bob</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;bob-id&quot;</span><span class="o">,</span> <span class="s">&quot;Bob&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">charlie</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="s">&quot;charlie-id&quot;</span><span class="o">,</span> <span class="s">&quot;Charlie&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">putPerson</span><span class="o">(</span><span class="n">alice</span><span class="o">)</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">putPerson</span><span class="o">(</span><span class="n">bob</span><span class="o">)</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">putPerson</span><span class="o">(</span><span class="n">charlie</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">makeFriends</span><span class="o">(</span><span class="n">alice</span><span class="o">,</span> <span class="n">bob</span><span class="o">)</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">makeFriends</span><span class="o">(</span><span class="n">alice</span><span class="o">,</span> <span class="n">charlie</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">getFriends</span><span class="o">(</span><span class="n">alice</span><span class="o">.</span><span class="n">id</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span> <span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">charlie</span><span class="o">,</span> <span class="n">bob</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Test with DSL</h3>

<p>Notable improvements are shown after refactoring using a DSL. The number of lines of code has gone up slightly, but crucially, the tests are expressed in far fewer lines. The last one is now expressed in four lines instead of nine.</p>

<p>The tests are also now written in terms that everyone can understand. People are now referred to purely by name, and relationships between them are clearly expressed.</p>

<p>The example below uses the <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=179766" title="Pimp my Library by Martin Odersky">Pimp My Library</a> pattern to convert a Person into a PersonDSL. It is equally valid to not use implicits, and simply return a case class of PersonDSL from the createPerson method. The choice of how to construct the DSL is down to personal preference, and coding conventions. An example of writing a DSL without using implicits is <a href="http://github.com">available in the example code here</a>.</p>

<figure class='code'><figcaption><span>FriendsGraphSpecWithDSL.scala </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.matchers.ShouldMatchers</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.</span><span class="o">{</span><span class="nc">OneInstancePerTest</span><span class="o">,</span> <span class="nc">FreeSpec</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FriendsGraphSpecWithDSL</span> <span class="k">extends</span> <span class="nc">FreeSpec</span> <span class="k">with</span> <span class="nc">ShouldMatchers</span> <span class="k">with</span> <span class="nc">OneInstancePerTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FriendsGraph</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;can store and retrieve people&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">alice</span> <span class="k">=</span> <span class="nc">_alice</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">getPerson</span><span class="o">(</span><span class="n">alice</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span> <span class="o">(</span><span class="n">alice</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;can store a friend&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">alice</span><span class="o">,</span> <span class="n">bob</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="nc">_alice</span><span class="o">,</span> <span class="nc">_bob</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alice</span> <span class="n">befriends</span> <span class="n">bob</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alice</span> <span class="n">isFriendsWith</span> <span class="n">bob</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;retrieves friends, first in last out&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">alice</span><span class="o">,</span> <span class="n">bob</span><span class="o">,</span> <span class="n">charlie</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="nc">_alice</span><span class="o">,</span> <span class="nc">_bob</span><span class="o">,</span> <span class="nc">_charlie</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alice</span> <span class="n">befriends</span> <span class="n">bob</span>
</span><span class='line'>    <span class="n">alice</span> <span class="n">befriends</span> <span class="n">charlie</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alice</span> <span class="n">isFriendsWith</span> <span class="o">(</span><span class="n">charlie</span><span class="o">,</span> <span class="n">bob</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">_alice</span><span class="o">()</span> <span class="k">=</span> <span class="n">createPerson</span><span class="o">(</span><span class="s">&quot;alice-id&quot;</span><span class="o">,</span> <span class="s">&quot;Alice&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">_bob</span><span class="o">()</span> <span class="k">=</span> <span class="n">createPerson</span><span class="o">(</span><span class="s">&quot;bob-id&quot;</span><span class="o">,</span> <span class="s">&quot;Bob&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">_charlie</span><span class="o">()</span> <span class="k">=</span> <span class="n">createPerson</span><span class="o">(</span><span class="s">&quot;charlie-id&quot;</span><span class="o">,</span> <span class="s">&quot;Charlie&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">createPerson</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">person</span> <span class="k">=</span> <span class="nc">Person</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">putPerson</span><span class="o">(</span><span class="n">person</span><span class="o">)</span>
</span><span class='line'>    <span class="n">person</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">getPerson</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">graph</span><span class="o">.</span><span class="n">getPerson</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">id</span><span class="o">).</span><span class="n">getOrElse</span><span class="o">(</span><span class="n">fail</span><span class="o">(</span><span class="s">&quot;could not find person: &quot;</span> <span class="o">+</span> <span class="n">person</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">pimpPerson</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span><span class="k">:</span> <span class="kt">PersonDSL</span> <span class="o">=</span> <span class="nc">PersonDSL</span><span class="o">(</span><span class="n">person</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">PersonDSL</span><span class="o">(</span><span class="n">person</span><span class="k">:</span> <span class="kt">Person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">befriends</span><span class="o">(</span><span class="n">friend</span><span class="k">:</span> <span class="kt">PersonDSL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">graph</span><span class="o">.</span><span class="n">makeFriends</span><span class="o">(</span><span class="n">person</span><span class="o">,</span> <span class="n">friend</span><span class="o">.</span><span class="n">person</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">isFriendsWith</span><span class="o">(</span><span class="n">friends</span><span class="k">:</span> <span class="kt">PersonDSL*</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">graph</span><span class="o">.</span><span class="n">getFriends</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="n">id</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span> <span class="o">(</span><span class="n">friends</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">person</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>DSLs have the ability to make tests easier to understand. However, as with anything, they are not applicable to all circumstances. It is but one technique. The example provided was a good fit as friendships between people are best understood, not as adjacency lists, but as actions and relationships.</p>

<p>Next time you start writing a complicated test, try altering your view on it and consider how it would read as a DSL. It may be compelling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Assertions with ScalaTest]]></title>
    <link href="http://cjwebb.github.io/blog/2013/05/27/better-assertions-with-scalatest/"/>
    <updated>2013-05-27T08:20:00+01:00</updated>
    <id>http://cjwebb.github.io/blog/2013/05/27/better-assertions-with-scalatest</id>
    <content type="html"><![CDATA[<p>Scala has three different frameworks for writing unit tests, JUnit, <a href="http://etorreborre.github.io/specs2/guide/org.specs2.guide.QuickStart.html" title="Specs2">Specs2</a> and <a href="http://www.scalatest.org/" title="ScalaTest">ScalaTest</a>. I have mainly been using ScalaTest since I started to learn Scala about four months ago. One of the areas I have been concentrating on is how to write good assertions. Specifically, ones that yield easily diagnosable error messages when they fail.</p>

<p>Whilst tests are useful to verify that code works, their other useful quality is that of preventing regressions. With tests, one can refactor and modify code without fear. Often these changes will cause an existing test to fail, and we want to diagnose the regression as fast as possible.</p>

<p>If you have read the <a href="http://www.scalatest.org/user_guide/writing_your_first_test" title="ScalaTest - Writing your first test">ScalaTest User Guide</a>, this example should be familiar to you:</p>

<figure class='code'><figcaption><span>StackSpec.scala </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">collection.mutable.Stack</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StackSpec</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;A Stack&quot;</span> <span class="n">should</span> <span class="s">&quot;pop values in last-in-first-out order&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">stack</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span> <span class="o">===</span> <span class="mi">3</span><span class="o">)</span> <span class="c1">// this will fail - should be 2</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span> <span class="o">===</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the test in an IDE, the error message will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2 did not equal 3
</span><span class='line'>org.scalatest.exceptions.TestFailedException: 2 did not equal 3
</span><span class='line'>  at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:318)
</span><span class='line'>  at StackSpec.newAssertionFailedException(StackSpec.scala:4)
</span><span class='line'>  at org.scalatest.Assertions$class.assert(Assertions.scala:401)
</span><span class='line'>  at StackSpec.assert(StackSpec.scala:4)
</span><span class='line'>  at StackSpec$$anonfun$1.apply$mcV$sp(StackSpec.scala:10)
</span><span class='line'>  ... (and many more lines)</span></code></pre></td></tr></table></div></figure>


<p>That isn&rsquo;t too bad, but the test is just above the stacktrace, and I&rsquo;ve already highlighted the line that will fail.</p>

<p>This is what you will see in your CI build, if you use SBT:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[info] StackSpec:
</span><span class='line'>[info] A Stack
</span><span class='line'>[info] - should pop values in last-in-first-out order *** FAILED ***
</span><span class='line'>[info]   2 did not equal 3 (StackSpec.scala:10)
</span><span class='line'>[error] Failed: : Total 1, Failed 1, Errors 0, Passed 0, Skipped 0
</span><span class='line'>[error] Failed tests:
</span><span class='line'>[error]   StackSpec</span></code></pre></td></tr></table></div></figure>


<p>The message that &ldquo;2 did not equal 3&rdquo; becomes more vague the further you get away from the test. If you saw that error message next week, would you remember that 2 was a value on the stack? And what does 3 have to do with it? Crucially, would your coworkers/contributors understand the failure the first time they looked at it?</p>

<p>Clearly, we want an error message that will represent the problem no matter how familiar you are with the implementation of the test.</p>

<p>We can use the withClue function to prepend a message:</p>

<figure class='code'><figcaption><span>StackSpecWithClue.scala </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">collection.mutable.Stack</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StackSpec</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;A Stack&quot;</span> <span class="n">should</span> <span class="s">&quot;pop values in last-in-first-out order&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">stack</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="n">withClue</span><span class="o">(</span><span class="s">&quot;value popped from stack: &quot;</span><span class="o">)</span> <span class="o">{</span> <span class="n">assert</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span> <span class="o">===</span> <span class="mi">3</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">withClue</span><span class="o">(</span><span class="s">&quot;value popped from stack: &quot;</span><span class="o">)</span> <span class="o">{</span> <span class="n">assert</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span> <span class="o">===</span> <span class="mi">1</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>value popped from stack: 2 did not equal 3
</span><span class='line'>org.scalatest.exceptions.TestFailedException: value popped from stack: 2 did not equal 3
</span><span class='line'>  at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:318)
</span><span class='line'>  at StackSpecWithClue.newAssertionFailedException(StackSpecWithClue.scala:4)
</span><span class='line'>  at org.scalatest.Assertions$class.assert(Assertions.scala:401)
</span><span class='line'>  at StackSpecWithClue.assert(StackSpecWithClue.scala:4)
</span><span class='line'>  at StackSpecWithClue$$anonfun$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(StackSpecWithClue.scala:10)
</span><span class='line'>  ... (and many more lines)</span></code></pre></td></tr></table></div></figure>


<p>This is already better; we have some context! In an ideal world, a test would only have one assertion, and it would give us full diagnostics. At the moment, our test fails as 2 does not equal 3, but it could equally fail if the last value popped does not equal 1. It would be nicer to push some values onto the stack, pop them all off, and then make sure they were in the correct order. That could be done with one assertion, and the full context of the test could be displayed in an error message.</p>

<figure class='code'><figcaption><span>StackSpecWithOneAssertion.scala </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">collection.mutable._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.matchers.ShouldMatchers</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StackSpecWithOneAssertion</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">ShouldMatchers</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="s">&quot;A Stack&quot;</span> <span class="n">should</span> <span class="s">&quot;pop values in last-in-first-out order&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">valuesToPush</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">stack</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'>      <span class="n">valuesToPush</span> <span class="n">foreach</span> <span class="o">{</span> <span class="n">v</span> <span class="k">=&gt;</span> <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">val</span> <span class="n">valuesPopped</span> <span class="k">=</span> <span class="nc">ArrayBuffer</span><span class="o">[</span><span class="kt">Int</span><span class="o">]()</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="n">nonEmpty</span><span class="o">)</span> <span class="n">valuesPopped</span> <span class="o">+=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="o">()</span>
</span><span class='line'>      <span class="n">valuesPopped</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span> <span class="c1">// to fail the test</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">withClue</span><span class="o">(</span><span class="s">&quot;values popped from stack: &quot;</span><span class="o">)</span> <span class="o">{</span> <span class="n">valuesPopped</span> <span class="n">should</span> <span class="n">be</span> <span class="o">(</span><span class="n">valuesToPush</span><span class="o">.</span><span class="n">reverse</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>order of values popped from stack: ArrayBuffer(5, 3, 2, 1) was not equal to ArrayBuffer(4, 3, 2, 1)
</span><span class='line'>org.scalatest.exceptions.TestFailedException: values popped from stack: ArrayBuffer(5, 3, 2, 1) was not equal to ArrayBuffer(4, 3, 2, 1)
</span><span class='line'>  at org.scalatest.matchers.ClassicMatchers$class.newTestFailedException(Matchers.scala:155)
</span><span class='line'>  at StackSpecWithOneAssertion.newTestFailedException(StackSpecWithOneAssertion.scala:5)
</span><span class='line'>  at org.scalatest.matchers.ShouldMatchers$ShouldMethodHelper$.shouldMatcher(ShouldMatchers.scala:884)
</span><span class='line'>  at org.scalatest.matchers.ShouldMatchers$SeqShouldWrapper.should(ShouldMatchers.scala:1737)
</span><span class='line'>  at StackSpecWithOneAssertion$$anonfun$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(StackSpecWithOneAssertion.scala:17)
</span><span class='line'>  ... (and many more lines)</span></code></pre></td></tr></table></div></figure>


<p>We now have context for the failure, and full diagnostics. If any of the numbers come out in the wrong order, we will be able to tell - not just the first failure.</p>

<p>You should always try to give good failure messages. If you spend an extra minute ensuring it is readable and comprehensive, you&rsquo;ll get that time back when the test fails. Also remember, it may not be you trying to figure out why the assertion failed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MongoDB TTL Collections to Manage User Registrations]]></title>
    <link href="http://cjwebb.github.io/blog/2012/12/17/mongodb-ttl-collections/"/>
    <updated>2012-12-17T11:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2012/12/17/mongodb-ttl-collections</id>
    <content type="html"><![CDATA[<p><a href="https://docs.mongodb.com/manual/tutorial/expire-data/">TTL Collections</a> were introduced in MongoDB 2.2. You are now able to create an index which triggers the deletion of a document after the TTL time passes.</p>

<p>One such use of TTL collections is temporarily storing user sign-ups. A common solution for a website to verify a user’s email address is to send the user a link to click on to activate their account. TTL collections can be used to remove users who never activate their account. This was the solution I used when implementing a web app.</p>

<p>Suppose we have If we have two collections inside MongoDB: user_invites, users. We then follow this flow:</p>

<ul>
<li>User fills in web-form with their invite code.</li>
<li>Upon submission, a UUID is generated.</li>
<li>We create a new document in user_invites, with all their details and the UUID:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "_id" : ObjectId(“505a1614001b9c1a9cb10803"),
</span><span class='line'>  "password" : "$2a$12$vCew7zzXqtyRGKQV4xfSZ.KbmmCRMx.pVJD6DesTLrOvuUghB5Oeu",
</span><span class='line'>  "expiry_time" : ISODate(“2012-10-21T18:59:31.753Z"),
</span><span class='line'>  "invite_code" : "an-invite-code",
</span><span class='line'>  "activation_code" : "cbcff14"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>We send the user an email to the email address they specified, with a URL to click on. This URL contains the UUID.</li>
<li>When the link is clicked on, we look up the user by the UUID and move all the information into the users collections.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "_id" : ObjectId("504ae6e2001b9c0548ab0b64"),
</span><span class='line'>  "password" : "$2a$12$vCew7zzXqtyRGKQV4xfSZ.KbmmCRMx.pVJD6DesTLrOvuUghB5Oeu",
</span><span class='line'>  "email" : "an_email@address.com",
</span><span class='line'>  "created_date" : ISODate(“2012-09-18T18:59:31.753Z")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If the URL is never clicked on, a background MongoDb process deletes the user_invite document after the time specified in the TTL index.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "v" : 1,
</span><span class='line'>  "key" : { "expiry_time" : 1 },
</span><span class='line'>  "ns" : "colin.user_invites",
</span><span class='line'>  "name" : "expiry_time_1",
</span><span class='line'>  "expireAfterSeconds" : 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Using this method, we can be sure that our users have a valid email address, and that they’ve actually visited the site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to JUnit Test a Private Method]]></title>
    <link href="http://cjwebb.github.io/blog/2010/10/31/junit-test-private-method/"/>
    <updated>2010-10-31T11:00:00+00:00</updated>
    <id>http://cjwebb.github.io/blog/2010/10/31/junit-test-private-method</id>
    <content type="html"><![CDATA[<p>I was recently writing a cache for MP3s at work, and I needed to test some private methods. Testing a private method in Java is doable using reflection.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MP3Cache</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MP3Cache</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* let us test this method */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">returnTrue</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">)){</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look, in that class, there’s a private method. Lets test it using the code below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">junit.framework.TestCase</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">junit.framework.TestSuite</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MP3CacheTest</span> <span class="kd">extends</span> <span class="n">TestCase</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MP3CacheTest</span><span class="o">(){</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">junit</span><span class="o">.</span><span class="na">textui</span><span class="o">.</span><span class="na">TestRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="k">new</span> <span class="nf">TestSuite</span><span class="o">(</span><span class="n">MP3CacheTest</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testReturnTrue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// class testing</span>
</span><span class='line'>     <span class="n">MP3Cache</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MP3Cache</span><span class="o">();</span>
</span><span class='line'>     <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">MP3Cache</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// parameter classes</span>
</span><span class='line'>     <span class="n">Class</span><span class="o">[]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>     <span class="n">parameterTypes</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// make it accessible</span>
</span><span class='line'>     <span class="n">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&quot;returnTrue&quot;</span><span class="o">,</span> <span class="n">parameterTypes</span><span class="o">);</span>
</span><span class='line'>     <span class="n">m</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// test it</span>
</span><span class='line'>     <span class="n">Object</span><span class="o">[]</span> <span class="n">parameters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>     <span class="n">parameters</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">Boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">Boolean</span><span class="o">)</span><span class="n">m</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">cache</span><span class="o">,</span> <span class="n">parameters</span><span class="o">);</span>
</span><span class='line'>     <span class="n">assertTrue</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">booleanValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Marvellous.</p>
]]></content>
  </entry>
  
</feed>
